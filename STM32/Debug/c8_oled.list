
c8_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c58  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a90  08008a90  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08008a90  08008a90  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a90  08008a90  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000080  08008b18  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08008b18  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeec  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002319  00000000  00000000  0002ef95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000322b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fe2  00000000  00000000  00033200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116cd  00000000  00000000  0004c1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e610  00000000  00000000  0005d8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebebf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  000ebf10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e20 	.word	0x08004e20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004e20 	.word	0x08004e20

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0ac      	sub	sp, #176	; 0xb0
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 fbb9 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fa25 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fac1 	bl	80006e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 fa67 	bl	8000630 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 fa93 	bl	800068c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000166:	f000 fd07 	bl	8000b78 <SSD1306_Init>
  char snum[5];
  char dnum[5];
  char cnum[5];
  char mnum[5];

  int seg=0;
 800016a:	2300      	movs	r3, #0
 800016c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int seg2=1;
 8000170:	2301      	movs	r3, #1
 8000172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int min1=1;
 8000176:	2301      	movs	r3, #1
 8000178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int min2=1;
 800017c:	2301      	movs	r3, #1
 800017e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  logo_init();
 8000182:	f000 faf1 	bl	8000768 <logo_init>

  /*Time design*/
  SSD1306_GotoXY (30,30);
 8000186:	211e      	movs	r1, #30
 8000188:	201e      	movs	r0, #30
 800018a:	f000 fe5d 	bl	8000e48 <SSD1306_GotoXY>
  SSD1306_Puts ("00:00", &Font_11x18, 1);
 800018e:	2201      	movs	r2, #1
 8000190:	49c9      	ldr	r1, [pc, #804]	; (80004b8 <main+0x36c>)
 8000192:	48ca      	ldr	r0, [pc, #808]	; (80004bc <main+0x370>)
 8000194:	f000 feee 	bl	8000f74 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000198:	f000 fdb2 	bl	8000d00 <SSD1306_UpdateScreen>
  int toggle=0;
 800019c:	2300      	movs	r3, #0
 800019e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  char pack[50]={" "};
 80001a2:	2320      	movs	r3, #32
 80001a4:	613b      	str	r3, [r7, #16]
 80001a6:	f107 0314 	add.w	r3, r7, #20
 80001aa:	222e      	movs	r2, #46	; 0x2e
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f003 fd0a 	bl	8003bc8 <memset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 /*interactive buttons*/
	 toggle_anim(toggle);
 80001b4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80001b8:	f000 fc24 	bl	8000a04 <toggle_anim>
	 SSD1306_UpdateScreen();
 80001bc:	f000 fda0 	bl	8000d00 <SSD1306_UpdateScreen>

	 /*Receive Data*/
	 HAL_UART_Receive(&huart1, &pack, sizeof(pack),6123);
 80001c0:	f107 0110 	add.w	r1, r7, #16
 80001c4:	f241 73eb 	movw	r3, #6123	; 0x17eb
 80001c8:	2232      	movs	r2, #50	; 0x32
 80001ca:	48bd      	ldr	r0, [pc, #756]	; (80004c0 <main+0x374>)
 80001cc:	f003 fb39 	bl	8003842 <HAL_UART_Receive>
	 char *token=strtok(pack,",");
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	49bb      	ldr	r1, [pc, #748]	; (80004c4 <main+0x378>)
 80001d6:	4618      	mov	r0, r3
 80001d8:	f003 fcfe 	bl	8003bd8 <strtok>
 80001dc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	 int cont=0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 while (token !=NULL){
 80001e6:	e0c0      	b.n	800036a <main+0x21e>
		 if (cont==0){
 80001e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d114      	bne.n	800021a <main+0xce>
			SSD1306_DrawFilledRectangle(0,0, 124,10, 0);
 80001f0:	2300      	movs	r3, #0
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	230a      	movs	r3, #10
 80001f6:	227c      	movs	r2, #124	; 0x7c
 80001f8:	2100      	movs	r1, #0
 80001fa:	2000      	movs	r0, #0
 80001fc:	f001 f844 	bl	8001288 <SSD1306_DrawFilledRectangle>
			SSD1306_UpdateScreen();
 8000200:	f000 fd7e 	bl	8000d00 <SSD1306_UpdateScreen>
			SSD1306_GotoXY (0,0);
 8000204:	2100      	movs	r1, #0
 8000206:	2000      	movs	r0, #0
 8000208:	f000 fe1e 	bl	8000e48 <SSD1306_GotoXY>
			SSD1306_Puts (token, &Font_7x10, 1);
 800020c:	2201      	movs	r2, #1
 800020e:	49ae      	ldr	r1, [pc, #696]	; (80004c8 <main+0x37c>)
 8000210:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000214:	f000 feae 	bl	8000f74 <SSD1306_Puts>
 8000218:	e09c      	b.n	8000354 <main+0x208>
		 }
		 else if (cont==1){
 800021a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800021e:	2b01      	cmp	r3, #1
 8000220:	d114      	bne.n	800024c <main+0x100>
			SSD1306_DrawFilledRectangle(0,16, 124,10, 0);
 8000222:	2300      	movs	r3, #0
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	230a      	movs	r3, #10
 8000228:	227c      	movs	r2, #124	; 0x7c
 800022a:	2110      	movs	r1, #16
 800022c:	2000      	movs	r0, #0
 800022e:	f001 f82b 	bl	8001288 <SSD1306_DrawFilledRectangle>
			SSD1306_UpdateScreen();
 8000232:	f000 fd65 	bl	8000d00 <SSD1306_UpdateScreen>
			SSD1306_GotoXY (0,16);
 8000236:	2110      	movs	r1, #16
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fe05 	bl	8000e48 <SSD1306_GotoXY>
			SSD1306_Puts (token, &Font_7x10, 1);
 800023e:	2201      	movs	r2, #1
 8000240:	49a1      	ldr	r1, [pc, #644]	; (80004c8 <main+0x37c>)
 8000242:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000246:	f000 fe95 	bl	8000f74 <SSD1306_Puts>
 800024a:	e083      	b.n	8000354 <main+0x208>
		 }
		 else if (cont==2){
 800024c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000250:	2b02      	cmp	r3, #2
 8000252:	d17f      	bne.n	8000354 <main+0x208>
			SSD1306_DrawFilledRectangle(27,29, 124,18, 0);
 8000254:	2300      	movs	r3, #0
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	2312      	movs	r3, #18
 800025a:	227c      	movs	r2, #124	; 0x7c
 800025c:	211d      	movs	r1, #29
 800025e:	201b      	movs	r0, #27
 8000260:	f001 f812 	bl	8001288 <SSD1306_DrawFilledRectangle>
			SSD1306_UpdateScreen();
 8000264:	f000 fd4c 	bl	8000d00 <SSD1306_UpdateScreen>
			int x=atoi(token);
 8000268:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800026c:	f003 fc64 	bl	8003b38 <atoi>
 8000270:	6778      	str	r0, [r7, #116]	; 0x74
			int unit= x%10;
 8000272:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000274:	4b95      	ldr	r3, [pc, #596]	; (80004cc <main+0x380>)
 8000276:	fb83 1302 	smull	r1, r3, r3, r2
 800027a:	1099      	asrs	r1, r3, #2
 800027c:	17d3      	asrs	r3, r2, #31
 800027e:	1ac9      	subs	r1, r1, r3
 8000280:	460b      	mov	r3, r1
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	440b      	add	r3, r1
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	673b      	str	r3, [r7, #112]	; 0x70
			int deci=((x%100)-unit)/10;
 800028c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800028e:	4b90      	ldr	r3, [pc, #576]	; (80004d0 <main+0x384>)
 8000290:	fb83 1302 	smull	r1, r3, r3, r2
 8000294:	1159      	asrs	r1, r3, #5
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1acb      	subs	r3, r1, r3
 800029a:	2164      	movs	r1, #100	; 0x64
 800029c:	fb01 f303 	mul.w	r3, r1, r3
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80002a4:	1a9b      	subs	r3, r3, r2
 80002a6:	4a89      	ldr	r2, [pc, #548]	; (80004cc <main+0x380>)
 80002a8:	fb82 1203 	smull	r1, r2, r2, r3
 80002ac:	1092      	asrs	r2, r2, #2
 80002ae:	17db      	asrs	r3, r3, #31
 80002b0:	1ad3      	subs	r3, r2, r3
 80002b2:	66fb      	str	r3, [r7, #108]	; 0x6c
			int cent=x/100;
 80002b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80002b6:	4a86      	ldr	r2, [pc, #536]	; (80004d0 <main+0x384>)
 80002b8:	fb82 1203 	smull	r1, r2, r2, r3
 80002bc:	1152      	asrs	r2, r2, #5
 80002be:	17db      	asrs	r3, r3, #31
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	66bb      	str	r3, [r7, #104]	; 0x68
			int mil=x/1000;
 80002c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80002c6:	4a83      	ldr	r2, [pc, #524]	; (80004d4 <main+0x388>)
 80002c8:	fb82 1203 	smull	r1, r2, r2, r3
 80002cc:	1192      	asrs	r2, r2, #6
 80002ce:	17db      	asrs	r3, r3, #31
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	667b      	str	r3, [r7, #100]	; 0x64
			itoa(unit, snum,10);
 80002d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d8:	220a      	movs	r2, #10
 80002da:	4619      	mov	r1, r3
 80002dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80002de:	f003 fc71 	bl	8003bc4 <itoa>
			itoa(deci, dnum,10);
 80002e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002e6:	220a      	movs	r2, #10
 80002e8:	4619      	mov	r1, r3
 80002ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80002ec:	f003 fc6a 	bl	8003bc4 <itoa>
			itoa(cent, cnum,10);
 80002f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002f4:	220a      	movs	r2, #10
 80002f6:	4619      	mov	r1, r3
 80002f8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80002fa:	f003 fc63 	bl	8003bc4 <itoa>
			itoa(mil, mnum,10);
 80002fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000302:	220a      	movs	r2, #10
 8000304:	4619      	mov	r1, r3
 8000306:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000308:	f003 fc5c 	bl	8003bc4 <itoa>
			SSD1306_GotoXY (27,29);
 800030c:	211d      	movs	r1, #29
 800030e:	201b      	movs	r0, #27
 8000310:	f000 fd9a 	bl	8000e48 <SSD1306_GotoXY>
			SSD1306_Puts (mnum, &Font_11x18, 1);
 8000314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000318:	2201      	movs	r2, #1
 800031a:	4967      	ldr	r1, [pc, #412]	; (80004b8 <main+0x36c>)
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fe29 	bl	8000f74 <SSD1306_Puts>
			SSD1306_Puts (cnum, &Font_11x18, 1);
 8000322:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000326:	2201      	movs	r2, #1
 8000328:	4963      	ldr	r1, [pc, #396]	; (80004b8 <main+0x36c>)
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fe22 	bl	8000f74 <SSD1306_Puts>
			SSD1306_GotoXY (67,29);
 8000330:	211d      	movs	r1, #29
 8000332:	2043      	movs	r0, #67	; 0x43
 8000334:	f000 fd88 	bl	8000e48 <SSD1306_GotoXY>
			SSD1306_Puts (dnum, &Font_11x18, 1);
 8000338:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800033c:	2201      	movs	r2, #1
 800033e:	495e      	ldr	r1, [pc, #376]	; (80004b8 <main+0x36c>)
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fe17 	bl	8000f74 <SSD1306_Puts>
			SSD1306_Puts (snum, &Font_11x18, 1);
 8000346:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800034a:	2201      	movs	r2, #1
 800034c:	495a      	ldr	r1, [pc, #360]	; (80004b8 <main+0x36c>)
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fe10 	bl	8000f74 <SSD1306_Puts>
		 }
		 token= strtok(NULL, ",");
 8000354:	495b      	ldr	r1, [pc, #364]	; (80004c4 <main+0x378>)
 8000356:	2000      	movs	r0, #0
 8000358:	f003 fc3e 	bl	8003bd8 <strtok>
 800035c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		 cont++;
 8000360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000364:	3301      	adds	r3, #1
 8000366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 while (token !=NULL){
 800036a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800036e:	2b00      	cmp	r3, #0
 8000370:	f47f af3a 	bne.w	80001e8 <main+0x9c>
	 }

	 SSD1306_DrawBitmap(20,46,bitmap_backward,15,15,1);
 8000374:	2301      	movs	r3, #1
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	230f      	movs	r3, #15
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	230f      	movs	r3, #15
 800037e:	4a56      	ldr	r2, [pc, #344]	; (80004d8 <main+0x38c>)
 8000380:	212e      	movs	r1, #46	; 0x2e
 8000382:	2014      	movs	r0, #20
 8000384:	f000 fb90 	bl	8000aa8 <SSD1306_DrawBitmap>
	 SSD1306_DrawBitmap(50,36,bitmap_play,16,16,1);
 8000388:	2301      	movs	r3, #1
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2310      	movs	r3, #16
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2310      	movs	r3, #16
 8000392:	4a52      	ldr	r2, [pc, #328]	; (80004dc <main+0x390>)
 8000394:	2124      	movs	r1, #36	; 0x24
 8000396:	2032      	movs	r0, #50	; 0x32
 8000398:	f000 fb86 	bl	8000aa8 <SSD1306_DrawBitmap>
	 SSD1306_DrawBitmap(80,46,bitmap_forward,15,15,1);
 800039c:	2301      	movs	r3, #1
 800039e:	9301      	str	r3, [sp, #4]
 80003a0:	230f      	movs	r3, #15
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	230f      	movs	r3, #15
 80003a6:	4a4e      	ldr	r2, [pc, #312]	; (80004e0 <main+0x394>)
 80003a8:	212e      	movs	r1, #46	; 0x2e
 80003aa:	2050      	movs	r0, #80	; 0x50
 80003ac:	f000 fb7c 	bl	8000aa8 <SSD1306_DrawBitmap>
	 SSD1306_UpdateScreen();
 80003b0:	f000 fca6 	bl	8000d00 <SSD1306_UpdateScreen>


	 char character=0b000;
 80003b4:	2300      	movs	r3, #0
 80003b6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	 int one=HAL_GPIO_ReadPin(GPIOB, PlayPauseButton_Pin);
 80003ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003be:	4849      	ldr	r0, [pc, #292]	; (80004e4 <main+0x398>)
 80003c0:	f001 fd3c 	bl	8001e3c <HAL_GPIO_ReadPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	 int two=HAL_GPIO_ReadPin(GPIOB, BackwardButton_Pin);
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4845      	ldr	r0, [pc, #276]	; (80004e4 <main+0x398>)
 80003d0:	f001 fd34 	bl	8001e3c <HAL_GPIO_ReadPin>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	 int three=HAL_GPIO_ReadPin(GPIOB, ForwardButton_Pin);
 80003da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003de:	4841      	ldr	r0, [pc, #260]	; (80004e4 <main+0x398>)
 80003e0:	f001 fd2c 	bl	8001e3c <HAL_GPIO_ReadPin>
 80003e4:	4603      	mov	r3, r0
 80003e6:	67fb      	str	r3, [r7, #124]	; 0x7c
	 if (one){
 80003e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d044      	beq.n	800047a <main+0x32e>
		 command=0x1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		 char dataT[2]={command,'\n'};
 80003f6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80003fa:	733b      	strb	r3, [r7, #12]
 80003fc:	230a      	movs	r3, #10
 80003fe:	737b      	strb	r3, [r7, #13]
		 HAL_UART_Transmit(&huart1, &dataT, sizeof(dataT),150);
 8000400:	f107 010c 	add.w	r1, r7, #12
 8000404:	2396      	movs	r3, #150	; 0x96
 8000406:	2202      	movs	r2, #2
 8000408:	482d      	ldr	r0, [pc, #180]	; (80004c0 <main+0x374>)
 800040a:	f003 f988 	bl	800371e <HAL_UART_Transmit>
		 SSD1306_DrawBitmap(50,36,bitmap_play,16,16,0);
 800040e:	2300      	movs	r3, #0
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	2310      	movs	r3, #16
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2310      	movs	r3, #16
 8000418:	4a30      	ldr	r2, [pc, #192]	; (80004dc <main+0x390>)
 800041a:	2124      	movs	r1, #36	; 0x24
 800041c:	2032      	movs	r0, #50	; 0x32
 800041e:	f000 fb43 	bl	8000aa8 <SSD1306_DrawBitmap>
		 SSD1306_UpdateScreen();
 8000422:	f000 fc6d 	bl	8000d00 <SSD1306_UpdateScreen>
		 SSD1306_DrawBitmap(50,36,bitmap_pause,15,16,1);
 8000426:	2301      	movs	r3, #1
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	2310      	movs	r3, #16
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	230f      	movs	r3, #15
 8000430:	4a2d      	ldr	r2, [pc, #180]	; (80004e8 <main+0x39c>)
 8000432:	2124      	movs	r1, #36	; 0x24
 8000434:	2032      	movs	r0, #50	; 0x32
 8000436:	f000 fb37 	bl	8000aa8 <SSD1306_DrawBitmap>
		 SSD1306_UpdateScreen();
 800043a:	f000 fc61 	bl	8000d00 <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 800043e:	2064      	movs	r0, #100	; 0x64
 8000440:	f001 fa74 	bl	800192c <HAL_Delay>
		 SSD1306_DrawBitmap(50,36,bitmap_pause,15,16,0);
 8000444:	2300      	movs	r3, #0
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	2310      	movs	r3, #16
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	230f      	movs	r3, #15
 800044e:	4a26      	ldr	r2, [pc, #152]	; (80004e8 <main+0x39c>)
 8000450:	2124      	movs	r1, #36	; 0x24
 8000452:	2032      	movs	r0, #50	; 0x32
 8000454:	f000 fb28 	bl	8000aa8 <SSD1306_DrawBitmap>
		 SSD1306_UpdateScreen();
 8000458:	f000 fc52 	bl	8000d00 <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 800045c:	2064      	movs	r0, #100	; 0x64
 800045e:	f001 fa65 	bl	800192c <HAL_Delay>
		 SSD1306_DrawBitmap(50,36,bitmap_play,16,16,1);
 8000462:	2301      	movs	r3, #1
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	2310      	movs	r3, #16
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2310      	movs	r3, #16
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <main+0x390>)
 800046e:	2124      	movs	r1, #36	; 0x24
 8000470:	2032      	movs	r0, #50	; 0x32
 8000472:	f000 fb19 	bl	8000aa8 <SSD1306_DrawBitmap>
		 SSD1306_UpdateScreen();
 8000476:	f000 fc43 	bl	8000d00 <SSD1306_UpdateScreen>
	 }
	 if (two){
 800047a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800047e:	2b00      	cmp	r3, #0
 8000480:	d034      	beq.n	80004ec <main+0x3a0>
		 command=0x2;
 8000482:	2302      	movs	r3, #2
 8000484:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		 SSD1306_DrawRectangle(20,46,15,15,1);
 8000488:	2301      	movs	r3, #1
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	230f      	movs	r3, #15
 800048e:	220f      	movs	r2, #15
 8000490:	212e      	movs	r1, #46	; 0x2e
 8000492:	2014      	movs	r0, #20
 8000494:	f000 fe8e 	bl	80011b4 <SSD1306_DrawRectangle>
		 SSD1306_UpdateScreen();
 8000498:	f000 fc32 	bl	8000d00 <SSD1306_UpdateScreen>
		 char dataT[2]={command,'\n'};
 800049c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80004a0:	723b      	strb	r3, [r7, #8]
 80004a2:	230a      	movs	r3, #10
 80004a4:	727b      	strb	r3, [r7, #9]
		 HAL_UART_Transmit(&huart1, &dataT, sizeof(dataT),150);
 80004a6:	f107 0108 	add.w	r1, r7, #8
 80004aa:	2396      	movs	r3, #150	; 0x96
 80004ac:	2202      	movs	r2, #2
 80004ae:	4804      	ldr	r0, [pc, #16]	; (80004c0 <main+0x374>)
 80004b0:	f003 f935 	bl	800371e <HAL_UART_Transmit>
 80004b4:	e028      	b.n	8000508 <main+0x3bc>
 80004b6:	bf00      	nop
 80004b8:	20000008 	.word	0x20000008
 80004bc:	08004e38 	.word	0x08004e38
 80004c0:	200000f0 	.word	0x200000f0
 80004c4:	08004e40 	.word	0x08004e40
 80004c8:	20000000 	.word	0x20000000
 80004cc:	66666667 	.word	0x66666667
 80004d0:	51eb851f 	.word	0x51eb851f
 80004d4:	10624dd3 	.word	0x10624dd3
 80004d8:	080087c8 	.word	0x080087c8
 80004dc:	08006344 	.word	0x08006344
 80004e0:	080087e8 	.word	0x080087e8
 80004e4:	40010c00 	.word	0x40010c00
 80004e8:	08006364 	.word	0x08006364

	 }
	 else if (!two){
 80004ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d109      	bne.n	8000508 <main+0x3bc>
		 SSD1306_DrawRectangle(20,46,15,15,0);
 80004f4:	2300      	movs	r3, #0
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	230f      	movs	r3, #15
 80004fa:	220f      	movs	r2, #15
 80004fc:	212e      	movs	r1, #46	; 0x2e
 80004fe:	2014      	movs	r0, #20
 8000500:	f000 fe58 	bl	80011b4 <SSD1306_DrawRectangle>
		 SSD1306_UpdateScreen();
 8000504:	f000 fbfc 	bl	8000d00 <SSD1306_UpdateScreen>
	 }
	 if (three){
 8000508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800050a:	2b00      	cmp	r3, #0
 800050c:	d018      	beq.n	8000540 <main+0x3f4>
		 command=0x3;
 800050e:	2303      	movs	r3, #3
 8000510:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		 SSD1306_DrawRectangle(80,46,15,15,1);
 8000514:	2301      	movs	r3, #1
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	230f      	movs	r3, #15
 800051a:	220f      	movs	r2, #15
 800051c:	212e      	movs	r1, #46	; 0x2e
 800051e:	2050      	movs	r0, #80	; 0x50
 8000520:	f000 fe48 	bl	80011b4 <SSD1306_DrawRectangle>
		 SSD1306_UpdateScreen();
 8000524:	f000 fbec 	bl	8000d00 <SSD1306_UpdateScreen>
		 char dataT[2]={command,'\n'};
 8000528:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800052c:	713b      	strb	r3, [r7, #4]
 800052e:	230a      	movs	r3, #10
 8000530:	717b      	strb	r3, [r7, #5]
		 HAL_UART_Transmit(&huart1, &dataT, sizeof(dataT),150);
 8000532:	1d39      	adds	r1, r7, #4
 8000534:	2396      	movs	r3, #150	; 0x96
 8000536:	2202      	movs	r2, #2
 8000538:	4819      	ldr	r0, [pc, #100]	; (80005a0 <main+0x454>)
 800053a:	f003 f8f0 	bl	800371e <HAL_UART_Transmit>
 800053e:	e00c      	b.n	800055a <main+0x40e>

	 }
	 else if (!three){
 8000540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <main+0x40e>
		 SSD1306_DrawRectangle(80,46,15,15,0);
 8000546:	2300      	movs	r3, #0
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	230f      	movs	r3, #15
 800054c:	220f      	movs	r2, #15
 800054e:	212e      	movs	r1, #46	; 0x2e
 8000550:	2050      	movs	r0, #80	; 0x50
 8000552:	f000 fe2f 	bl	80011b4 <SSD1306_DrawRectangle>
		 SSD1306_UpdateScreen();
 8000556:	f000 fbd3 	bl	8000d00 <SSD1306_UpdateScreen>
	 }


	 toggle_anim(toggle);
 800055a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800055e:	f000 fa51 	bl	8000a04 <toggle_anim>

	 if (toggle==2){
 8000562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000566:	2b02      	cmp	r3, #2
 8000568:	d103      	bne.n	8000572 <main+0x426>
		 toggle=-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	 }
	 toggle++;
 8000572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000576:	3301      	adds	r3, #1
 8000578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4


	 SSD1306_UpdateScreen();
 800057c:	f000 fbc0 	bl	8000d00 <SSD1306_UpdateScreen>
	 SSD1306_DrawFilledRectangle(42,52, 35,9, 0);
 8000580:	2300      	movs	r3, #0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2309      	movs	r3, #9
 8000586:	2223      	movs	r2, #35	; 0x23
 8000588:	2134      	movs	r1, #52	; 0x34
 800058a:	202a      	movs	r0, #42	; 0x2a
 800058c:	f000 fe7c 	bl	8001288 <SSD1306_DrawFilledRectangle>
	 HAL_Delay(2500);
 8000590:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000594:	f001 f9ca 	bl	800192c <HAL_Delay>
	 SSD1306_UpdateScreen();
 8000598:	f000 fbb2 	bl	8000d00 <SSD1306_UpdateScreen>
  {
 800059c:	e60a      	b.n	80001b4 <main+0x68>
 800059e:	bf00      	nop
 80005a0:	200000f0 	.word	0x200000f0

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b090      	sub	sp, #64	; 0x40
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2228      	movs	r2, #40	; 0x28
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fb08 	bl	8003bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0318 	add.w	r3, r7, #24
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f9b5 	bl	800295c <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005f8:	f000 fa51 	bl	8000a9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fc22 	bl	8002e60 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000622:	f000 fa3c 	bl	8000a9e <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3740      	adds	r7, #64	; 0x40
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f001 fbfd 	bl	8001e6c <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 fa11 	bl	8000a9e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000009c 	.word	0x2000009c
 8000684:	40005400 	.word	0x40005400
 8000688:	00061a80 	.word	0x00061a80

0800068c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART1_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f002 ffde 	bl	8003684 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f9e6 	bl	8000a9e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000f0 	.word	0x200000f0
 80006dc:	40013800 	.word	0x40013800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_GPIO_Init+0x80>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a19      	ldr	r2, [pc, #100]	; (8000760 <MX_GPIO_Init+0x80>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_GPIO_Init+0x80>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0320 	and.w	r3, r3, #32
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_GPIO_Init+0x80>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_GPIO_Init+0x80>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_GPIO_Init+0x80>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_GPIO_Init+0x80>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <MX_GPIO_Init+0x80>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_GPIO_Init+0x80>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BackwardButton_Pin PlayPauseButton_Pin ForwardButton_Pin */
  GPIO_InitStruct.Pin = BackwardButton_Pin|PlayPauseButton_Pin|ForwardButton_Pin;
 800073c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0x84>)
 8000752:	f001 f9ef 	bl	8001b34 <HAL_GPIO_Init>

}
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	40010c00 	.word	0x40010c00

08000768 <logo_init>:

/* USER CODE BEGIN 4 */
void logo_init (void){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af02      	add	r7, sp, #8

	  /*LOGO ANIMATION*/
	  SSD1306_GotoXY (0,0);
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fb69 	bl	8000e48 <SSD1306_GotoXY>
	  SSD1306_Puts ("Prehispanic", &Font_11x18, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	498d      	ldr	r1, [pc, #564]	; (80009b0 <logo_init+0x248>)
 800077a:	488e      	ldr	r0, [pc, #568]	; (80009b4 <logo_init+0x24c>)
 800077c:	f000 fbfa 	bl	8000f74 <SSD1306_Puts>
	  SSD1306_DrawBitmap(0,15,bitmap_prehispanic,78,64,1);
 8000780:	2301      	movs	r3, #1
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	2340      	movs	r3, #64	; 0x40
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	234e      	movs	r3, #78	; 0x4e
 800078a:	4a8b      	ldr	r2, [pc, #556]	; (80009b8 <logo_init+0x250>)
 800078c:	210f      	movs	r1, #15
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f98a 	bl	8000aa8 <SSD1306_DrawBitmap>

	  SSD1306_GotoXY (88,30);
 8000794:	211e      	movs	r1, #30
 8000796:	2058      	movs	r0, #88	; 0x58
 8000798:	f000 fb56 	bl	8000e48 <SSD1306_GotoXY>
	  SSD1306_Puts ("MX", &Font_11x18, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	4984      	ldr	r1, [pc, #528]	; (80009b0 <logo_init+0x248>)
 80007a0:	4886      	ldr	r0, [pc, #536]	; (80009bc <logo_init+0x254>)
 80007a2:	f000 fbe7 	bl	8000f74 <SSD1306_Puts>
	  SSD1306_GotoXY (88,48);
 80007a6:	2130      	movs	r1, #48	; 0x30
 80007a8:	2058      	movs	r0, #88	; 0x58
 80007aa:	f000 fb4d 	bl	8000e48 <SSD1306_GotoXY>
	  SSD1306_Puts ("Auto", &Font_7x10, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	4983      	ldr	r1, [pc, #524]	; (80009c0 <logo_init+0x258>)
 80007b2:	4884      	ldr	r0, [pc, #528]	; (80009c4 <logo_init+0x25c>)
 80007b4:	f000 fbde 	bl	8000f74 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80007b8:	f000 faa2 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(3000);
 80007bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007c0:	f001 f8b4 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 80007c4:	f000 fdad 	bl	8001322 <SSD1306_Clear>

	  /*MP3 LOGO*/
	  SSD1306_DrawBitmap(0,1,bitmap_mp3,64,32,1);
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	2320      	movs	r3, #32
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	4a7d      	ldr	r2, [pc, #500]	; (80009c8 <logo_init+0x260>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f966 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_GotoXY (70,40);
 80007dc:	2128      	movs	r1, #40	; 0x28
 80007de:	2046      	movs	r0, #70	; 0x46
 80007e0:	f000 fb32 	bl	8000e48 <SSD1306_GotoXY>
	  SSD1306_Puts ("Welcome", &Font_7x10, 1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	4976      	ldr	r1, [pc, #472]	; (80009c0 <logo_init+0x258>)
 80007e8:	4878      	ldr	r0, [pc, #480]	; (80009cc <logo_init+0x264>)
 80007ea:	f000 fbc3 	bl	8000f74 <SSD1306_Puts>
	  SSD1306_GotoXY (70,50);
 80007ee:	2132      	movs	r1, #50	; 0x32
 80007f0:	2046      	movs	r0, #70	; 0x46
 80007f2:	f000 fb29 	bl	8000e48 <SSD1306_GotoXY>
	  SSD1306_Puts ("CarSys", &Font_7x10, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4971      	ldr	r1, [pc, #452]	; (80009c0 <logo_init+0x258>)
 80007fa:	4875      	ldr	r0, [pc, #468]	; (80009d0 <logo_init+0x268>)
 80007fc:	f000 fbba 	bl	8000f74 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000800:	f000 fa7e 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000808:	f001 f890 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 800080c:	f000 fd89 	bl	8001322 <SSD1306_Clear>

	  /*CAR ANIMATION*/
	  SSD1306_DrawBitmap(15,1,bitmap_car1,111,60,1);
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	233c      	movs	r3, #60	; 0x3c
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	236f      	movs	r3, #111	; 0x6f
 800081a:	4a6e      	ldr	r2, [pc, #440]	; (80009d4 <logo_init+0x26c>)
 800081c:	2101      	movs	r1, #1
 800081e:	200f      	movs	r0, #15
 8000820:	f000 f942 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000824:	f000 fa6c 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 8000828:	2096      	movs	r0, #150	; 0x96
 800082a:	f001 f87f 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 800082e:	f000 fd78 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car2,91,64,1);
 8000832:	2301      	movs	r3, #1
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	235b      	movs	r3, #91	; 0x5b
 800083c:	4a66      	ldr	r2, [pc, #408]	; (80009d8 <logo_init+0x270>)
 800083e:	2101      	movs	r1, #1
 8000840:	200f      	movs	r0, #15
 8000842:	f000 f931 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000846:	f000 fa5b 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 800084a:	2096      	movs	r0, #150	; 0x96
 800084c:	f001 f86e 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 8000850:	f000 fd67 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car3,66,64,1);
 8000854:	2301      	movs	r3, #1
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2342      	movs	r3, #66	; 0x42
 800085e:	4a5f      	ldr	r2, [pc, #380]	; (80009dc <logo_init+0x274>)
 8000860:	2101      	movs	r1, #1
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f920 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000868:	f000 fa4a 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 800086c:	2096      	movs	r0, #150	; 0x96
 800086e:	f001 f85d 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 8000872:	f000 fd56 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car4,60,64,1);
 8000876:	2301      	movs	r3, #1
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	233c      	movs	r3, #60	; 0x3c
 8000880:	4a57      	ldr	r2, [pc, #348]	; (80009e0 <logo_init+0x278>)
 8000882:	2101      	movs	r1, #1
 8000884:	200f      	movs	r0, #15
 8000886:	f000 f90f 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800088a:	f000 fa39 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 800088e:	2096      	movs	r0, #150	; 0x96
 8000890:	f001 f84c 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 8000894:	f000 fd45 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car5,91,64,1);
 8000898:	2301      	movs	r3, #1
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	235b      	movs	r3, #91	; 0x5b
 80008a2:	4a50      	ldr	r2, [pc, #320]	; (80009e4 <logo_init+0x27c>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f8fe 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80008ac:	f000 fa28 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 80008b0:	2096      	movs	r0, #150	; 0x96
 80008b2:	f001 f83b 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 80008b6:	f000 fd34 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car6,106,56,1);
 80008ba:	2301      	movs	r3, #1
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2338      	movs	r3, #56	; 0x38
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	236a      	movs	r3, #106	; 0x6a
 80008c4:	4a48      	ldr	r2, [pc, #288]	; (80009e8 <logo_init+0x280>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	200f      	movs	r0, #15
 80008ca:	f000 f8ed 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80008ce:	f000 fa17 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 80008d2:	2096      	movs	r0, #150	; 0x96
 80008d4:	f001 f82a 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 80008d8:	f000 fd23 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car7,105,62,1);
 80008dc:	2301      	movs	r3, #1
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	233e      	movs	r3, #62	; 0x3e
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2369      	movs	r3, #105	; 0x69
 80008e6:	4a41      	ldr	r2, [pc, #260]	; (80009ec <logo_init+0x284>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	200f      	movs	r0, #15
 80008ec:	f000 f8dc 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80008f0:	f000 fa06 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 80008f4:	2096      	movs	r0, #150	; 0x96
 80008f6:	f001 f819 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 80008fa:	f000 fd12 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car8,80,64,1);
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2350      	movs	r3, #80	; 0x50
 8000908:	4a39      	ldr	r2, [pc, #228]	; (80009f0 <logo_init+0x288>)
 800090a:	2101      	movs	r1, #1
 800090c:	200f      	movs	r0, #15
 800090e:	f000 f8cb 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000912:	f000 f9f5 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 8000916:	2096      	movs	r0, #150	; 0x96
 8000918:	f001 f808 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 800091c:	f000 fd01 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car9,61,64,1);
 8000920:	2301      	movs	r3, #1
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	233d      	movs	r3, #61	; 0x3d
 800092a:	4a32      	ldr	r2, [pc, #200]	; (80009f4 <logo_init+0x28c>)
 800092c:	2101      	movs	r1, #1
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f8ba 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000934:	f000 f9e4 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 8000938:	2096      	movs	r0, #150	; 0x96
 800093a:	f000 fff7 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 800093e:	f000 fcf0 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car10,54,64,1);
 8000942:	2301      	movs	r3, #1
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2336      	movs	r3, #54	; 0x36
 800094c:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <logo_init+0x290>)
 800094e:	2101      	movs	r1, #1
 8000950:	200f      	movs	r0, #15
 8000952:	f000 f8a9 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000956:	f000 f9d3 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 800095a:	2096      	movs	r0, #150	; 0x96
 800095c:	f000 ffe6 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 8000960:	f000 fcdf 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car11,86,64,1);
 8000964:	2301      	movs	r3, #1
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2356      	movs	r3, #86	; 0x56
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <logo_init+0x294>)
 8000970:	2101      	movs	r1, #1
 8000972:	200f      	movs	r0, #15
 8000974:	f000 f898 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000978:	f000 f9c2 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 800097c:	2096      	movs	r0, #150	; 0x96
 800097e:	f000 ffd5 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 8000982:	f000 fcce 	bl	8001322 <SSD1306_Clear>

	  SSD1306_DrawBitmap(15,1,bitmap_car12,108,61,1);
 8000986:	2301      	movs	r3, #1
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	233d      	movs	r3, #61	; 0x3d
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	236c      	movs	r3, #108	; 0x6c
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <logo_init+0x298>)
 8000992:	2101      	movs	r1, #1
 8000994:	200f      	movs	r0, #15
 8000996:	f000 f887 	bl	8000aa8 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800099a:	f000 f9b1 	bl	8000d00 <SSD1306_UpdateScreen>
	  HAL_Delay(150);
 800099e:	2096      	movs	r0, #150	; 0x96
 80009a0:	f000 ffc4 	bl	800192c <HAL_Delay>
	  SSD1306_Clear();
 80009a4:	f000 fcbd 	bl	8001322 <SSD1306_Clear>
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	08004e44 	.word	0x08004e44
 80009b8:	08006484 	.word	0x08006484
 80009bc:	08004e50 	.word	0x08004e50
 80009c0:	20000000 	.word	0x20000000
 80009c4:	08004e54 	.word	0x08004e54
 80009c8:	08006384 	.word	0x08006384
 80009cc:	08004e5c 	.word	0x08004e5c
 80009d0:	08004e64 	.word	0x08004e64
 80009d4:	08006704 	.word	0x08006704
 80009d8:	08006a4c 	.word	0x08006a4c
 80009dc:	08006d4c 	.word	0x08006d4c
 80009e0:	08006f8c 	.word	0x08006f8c
 80009e4:	0800718c 	.word	0x0800718c
 80009e8:	0800748c 	.word	0x0800748c
 80009ec:	0800779c 	.word	0x0800779c
 80009f0:	08007b00 	.word	0x08007b00
 80009f4:	08007d80 	.word	0x08007d80
 80009f8:	08007f80 	.word	0x08007f80
 80009fc:	08008140 	.word	0x08008140
 8000a00:	08008400 	.word	0x08008400

08000a04 <toggle_anim>:



void toggle_anim(int toggle){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	6078      	str	r0, [r7, #4]
	if (toggle==0){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10c      	bne.n	8000a2c <toggle_anim+0x28>
		 SSD1306_DrawBitmap(42,52,bitmap_eq1,35,8,1);
 8000a12:	2301      	movs	r3, #1
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2308      	movs	r3, #8
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2323      	movs	r3, #35	; 0x23
 8000a1c:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <toggle_anim+0x70>)
 8000a1e:	2134      	movs	r1, #52	; 0x34
 8000a20:	202a      	movs	r0, #42	; 0x2a
 8000a22:	f000 f841 	bl	8000aa8 <SSD1306_DrawBitmap>
		 toggle=1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	607b      	str	r3, [r7, #4]
	}
	else if (toggle==2){
		 SSD1306_DrawBitmap(42,52,bitmap_eq3,35,9,1);
		 toggle=0;
	}
}
 8000a2a:	e01e      	b.n	8000a6a <toggle_anim+0x66>
	else if (toggle==1){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d10c      	bne.n	8000a4c <toggle_anim+0x48>
		 SSD1306_DrawBitmap(42,52,bitmap_eq2,35,7,1);
 8000a32:	2301      	movs	r3, #1
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	2307      	movs	r3, #7
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2323      	movs	r3, #35	; 0x23
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <toggle_anim+0x74>)
 8000a3e:	2134      	movs	r1, #52	; 0x34
 8000a40:	202a      	movs	r0, #42	; 0x2a
 8000a42:	f000 f831 	bl	8000aa8 <SSD1306_DrawBitmap>
		 toggle=2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	607b      	str	r3, [r7, #4]
}
 8000a4a:	e00e      	b.n	8000a6a <toggle_anim+0x66>
	else if (toggle==2){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d10b      	bne.n	8000a6a <toggle_anim+0x66>
		 SSD1306_DrawBitmap(42,52,bitmap_eq3,35,9,1);
 8000a52:	2301      	movs	r3, #1
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	2309      	movs	r3, #9
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2323      	movs	r3, #35	; 0x23
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <toggle_anim+0x78>)
 8000a5e:	2134      	movs	r1, #52	; 0x34
 8000a60:	202a      	movs	r0, #42	; 0x2a
 8000a62:	f000 f821 	bl	8000aa8 <SSD1306_DrawBitmap>
		 toggle=0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08008758 	.word	0x08008758
 8000a78:	08008780 	.word	0x08008780
 8000a7c:	080087a4 	.word	0x080087a4

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 ff2f 	bl	80018f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa2:	b672      	cpsid	i
}
 8000aa4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <Error_Handler+0x8>

08000aa8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60ba      	str	r2, [r7, #8]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	81fb      	strh	r3, [r7, #14]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	81bb      	strh	r3, [r7, #12]
 8000aba:	4613      	mov	r3, r2
 8000abc:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac2:	3307      	adds	r3, #7
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	da00      	bge.n	8000aca <SSD1306_DrawBitmap+0x22>
 8000ac8:	3307      	adds	r3, #7
 8000aca:	10db      	asrs	r3, r3, #3
 8000acc:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	82bb      	strh	r3, [r7, #20]
 8000ad6:	e044      	b.n	8000b62 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	827b      	strh	r3, [r7, #18]
 8000adc:	e02f      	b.n	8000b3e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ade:	8a7b      	ldrh	r3, [r7, #18]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	75fb      	strb	r3, [r7, #23]
 8000aee:	e012      	b.n	8000b16 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000af0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000af4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000af8:	fb03 f202 	mul.w	r2, r3, r2
 8000afc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	da00      	bge.n	8000b06 <SSD1306_DrawBitmap+0x5e>
 8000b04:	3307      	adds	r3, #7
 8000b06:	10db      	asrs	r3, r3, #3
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da09      	bge.n	8000b32 <SSD1306_DrawBitmap+0x8a>
 8000b1e:	89fa      	ldrh	r2, [r7, #14]
 8000b20:	8a7b      	ldrh	r3, [r7, #18]
 8000b22:	4413      	add	r3, r2
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	89b9      	ldrh	r1, [r7, #12]
 8000b28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f92d 	bl	8000d8c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	827b      	strh	r3, [r7, #18]
 8000b3e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbc9      	blt.n	8000ade <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	82bb      	strh	r3, [r7, #20]
 8000b56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	81bb      	strh	r3, [r7, #12]
 8000b62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbb4      	blt.n	8000ad8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b7e:	f000 fbd9 	bl	8001334 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b82:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b86:	2201      	movs	r2, #1
 8000b88:	2178      	movs	r1, #120	; 0x78
 8000b8a:	485b      	ldr	r0, [pc, #364]	; (8000cf8 <SSD1306_Init+0x180>)
 8000b8c:	f001 fbb0 	bl	80022f0 <HAL_I2C_IsDeviceReady>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e0a9      	b.n	8000cee <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000b9a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ba0:	e002      	b.n	8000ba8 <SSD1306_Init+0x30>
		p--;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f9      	bne.n	8000ba2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bae:	22ae      	movs	r2, #174	; 0xae
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2078      	movs	r0, #120	; 0x78
 8000bb4:	f000 fc38 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2078      	movs	r0, #120	; 0x78
 8000bbe:	f000 fc33 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 fc2e 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bcc:	22b0      	movs	r2, #176	; 0xb0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 fc29 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000bd6:	22c8      	movs	r2, #200	; 0xc8
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 fc24 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2078      	movs	r0, #120	; 0x78
 8000be6:	f000 fc1f 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000bea:	2210      	movs	r2, #16
 8000bec:	2100      	movs	r1, #0
 8000bee:	2078      	movs	r0, #120	; 0x78
 8000bf0:	f000 fc1a 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2078      	movs	r0, #120	; 0x78
 8000bfa:	f000 fc15 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000bfe:	2281      	movs	r2, #129	; 0x81
 8000c00:	2100      	movs	r1, #0
 8000c02:	2078      	movs	r0, #120	; 0x78
 8000c04:	f000 fc10 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2078      	movs	r0, #120	; 0x78
 8000c0e:	f000 fc0b 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c12:	22a1      	movs	r2, #161	; 0xa1
 8000c14:	2100      	movs	r1, #0
 8000c16:	2078      	movs	r0, #120	; 0x78
 8000c18:	f000 fc06 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c1c:	22a6      	movs	r2, #166	; 0xa6
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2078      	movs	r0, #120	; 0x78
 8000c22:	f000 fc01 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c26:	22a8      	movs	r2, #168	; 0xa8
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2078      	movs	r0, #120	; 0x78
 8000c2c:	f000 fbfc 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c30:	223f      	movs	r2, #63	; 0x3f
 8000c32:	2100      	movs	r1, #0
 8000c34:	2078      	movs	r0, #120	; 0x78
 8000c36:	f000 fbf7 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c3a:	22a4      	movs	r2, #164	; 0xa4
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2078      	movs	r0, #120	; 0x78
 8000c40:	f000 fbf2 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c44:	22d3      	movs	r2, #211	; 0xd3
 8000c46:	2100      	movs	r1, #0
 8000c48:	2078      	movs	r0, #120	; 0x78
 8000c4a:	f000 fbed 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2078      	movs	r0, #120	; 0x78
 8000c54:	f000 fbe8 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c58:	22d5      	movs	r2, #213	; 0xd5
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f000 fbe3 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c62:	22f0      	movs	r2, #240	; 0xf0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	; 0x78
 8000c68:	f000 fbde 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c6c:	22d9      	movs	r2, #217	; 0xd9
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2078      	movs	r0, #120	; 0x78
 8000c72:	f000 fbd9 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c76:	2222      	movs	r2, #34	; 0x22
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	; 0x78
 8000c7c:	f000 fbd4 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c80:	22da      	movs	r2, #218	; 0xda
 8000c82:	2100      	movs	r1, #0
 8000c84:	2078      	movs	r0, #120	; 0x78
 8000c86:	f000 fbcf 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c8a:	2212      	movs	r2, #18
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2078      	movs	r0, #120	; 0x78
 8000c90:	f000 fbca 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c94:	22db      	movs	r2, #219	; 0xdb
 8000c96:	2100      	movs	r1, #0
 8000c98:	2078      	movs	r0, #120	; 0x78
 8000c9a:	f000 fbc5 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2078      	movs	r0, #120	; 0x78
 8000ca4:	f000 fbc0 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ca8:	228d      	movs	r2, #141	; 0x8d
 8000caa:	2100      	movs	r1, #0
 8000cac:	2078      	movs	r0, #120	; 0x78
 8000cae:	f000 fbbb 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cb2:	2214      	movs	r2, #20
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2078      	movs	r0, #120	; 0x78
 8000cb8:	f000 fbb6 	bl	8001428 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cbc:	22af      	movs	r2, #175	; 0xaf
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2078      	movs	r0, #120	; 0x78
 8000cc2:	f000 fbb1 	bl	8001428 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000cc6:	222e      	movs	r2, #46	; 0x2e
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2078      	movs	r0, #120	; 0x78
 8000ccc:	f000 fbac 	bl	8001428 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f843 	bl	8000d5c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000cd6:	f000 f813 	bl	8000d00 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <SSD1306_Init+0x184>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SSD1306_Init+0x184>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SSD1306_Init+0x184>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000009c 	.word	0x2000009c
 8000cfc:	20000534 	.word	0x20000534

08000d00 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e01d      	b.n	8000d48 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	3b50      	subs	r3, #80	; 0x50
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 fb86 	bl	8001428 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	; 0x78
 8000d22:	f000 fb81 	bl	8001428 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d26:	2210      	movs	r2, #16
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 fb7c 	bl	8001428 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	01db      	lsls	r3, r3, #7
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <SSD1306_UpdateScreen+0x58>)
 8000d36:	441a      	add	r2, r3
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	2078      	movs	r0, #120	; 0x78
 8000d3e:	f000 fb0d 	bl	800135c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3301      	adds	r3, #1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	d9de      	bls.n	8000d0c <SSD1306_UpdateScreen+0xc>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000134 	.word	0x20000134

08000d5c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <SSD1306_Fill+0x14>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e000      	b.n	8000d72 <SSD1306_Fill+0x16>
 8000d70:	23ff      	movs	r3, #255	; 0xff
 8000d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d76:	4619      	mov	r1, r3
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <SSD1306_Fill+0x2c>)
 8000d7a:	f002 ff25 	bl	8003bc8 <memset>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000134 	.word	0x20000134

08000d8c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
 8000d96:	460b      	mov	r3, r1
 8000d98:	80bb      	strh	r3, [r7, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	2b7f      	cmp	r3, #127	; 0x7f
 8000da2:	d848      	bhi.n	8000e36 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	2b3f      	cmp	r3, #63	; 0x3f
 8000da8:	d845      	bhi.n	8000e36 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SSD1306_DrawPixel+0xb4>)
 8000dac:	791b      	ldrb	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf0c      	ite	eq
 8000db8:	2301      	moveq	r3, #1
 8000dba:	2300      	movne	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d11a      	bne.n	8000dfc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dc6:	88fa      	ldrh	r2, [r7, #6]
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	b298      	uxth	r0, r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	01db      	lsls	r3, r3, #7
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <SSD1306_DrawPixel+0xb8>)
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	b25a      	sxtb	r2, r3
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	2101      	movs	r1, #1
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b259      	sxtb	r1, r3
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	4603      	mov	r3, r0
 8000df0:	01db      	lsls	r3, r3, #7
 8000df2:	4413      	add	r3, r2
 8000df4:	b2c9      	uxtb	r1, r1
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <SSD1306_DrawPixel+0xb8>)
 8000df8:	54d1      	strb	r1, [r2, r3]
 8000dfa:	e01d      	b.n	8000e38 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dfc:	88fa      	ldrh	r2, [r7, #6]
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b298      	uxth	r0, r3
 8000e04:	4603      	mov	r3, r0
 8000e06:	01db      	lsls	r3, r3, #7
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <SSD1306_DrawPixel+0xb8>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	4013      	ands	r3, r2
 8000e24:	b259      	sxtb	r1, r3
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	4603      	mov	r3, r0
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b2c9      	uxtb	r1, r1
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <SSD1306_DrawPixel+0xb8>)
 8000e32:	54d1      	strb	r1, [r2, r3]
 8000e34:	e000      	b.n	8000e38 <SSD1306_DrawPixel+0xac>
		return;
 8000e36:	bf00      	nop
	}
}
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000534 	.word	0x20000534
 8000e44:	20000134 	.word	0x20000134

08000e48 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	4613      	mov	r3, r2
 8000e56:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SSD1306_GotoXY+0x28>)
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <SSD1306_GotoXY+0x28>)
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	8053      	strh	r3, [r2, #2]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000534 	.word	0x20000534

08000e74 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e84:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
	if (
 8000e90:	2b7f      	cmp	r3, #127	; 0x7f
 8000e92:	dc07      	bgt.n	8000ea4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000e96:	885b      	ldrh	r3, [r3, #2]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ea0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea2:	dd01      	ble.n	8000ea8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e05e      	b.n	8000f66 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e04b      	b.n	8000f46 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3b20      	subs	r3, #32
 8000eb6:	6839      	ldr	r1, [r7, #0]
 8000eb8:	7849      	ldrb	r1, [r1, #1]
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	440b      	add	r3, r1
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	e030      	b.n	8000f34 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d010      	beq.n	8000f04 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000ee4:	881a      	ldrh	r2, [r3, #0]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	b298      	uxth	r0, r3
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000ef0:	885a      	ldrh	r2, [r3, #2]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	79ba      	ldrb	r2, [r7, #6]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff ff45 	bl	8000d8c <SSD1306_DrawPixel>
 8000f02:	e014      	b.n	8000f2e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f06:	881a      	ldrh	r2, [r3, #0]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b298      	uxth	r0, r3
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f12:	885a      	ldrh	r2, [r3, #2]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	b299      	uxth	r1, r3
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	f7ff ff2f 	bl	8000d8c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	3301      	adds	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d3c8      	bcc.n	8000ed2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d3ad      	bcc.n	8000eae <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f54:	881a      	ldrh	r2, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f62:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000534 	.word	0x20000534

08000f74 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f82:	e012      	b.n	8000faa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff71 	bl	8000e74 <SSD1306_Putc>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d002      	beq.n	8000fa4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	e008      	b.n	8000fb6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1e8      	bne.n	8000f84 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000fbe:	b590      	push	{r4, r7, lr}
 8000fc0:	b087      	sub	sp, #28
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	4611      	mov	r1, r2
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4623      	mov	r3, r4
 8000fce:	80fb      	strh	r3, [r7, #6]
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	80bb      	strh	r3, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe0:	d901      	bls.n	8000fe6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000fe2:	237f      	movs	r3, #127	; 0x7f
 8000fe4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8000fea:	d901      	bls.n	8000ff0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000fec:	237f      	movs	r3, #127	; 0x7f
 8000fee:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff4:	d901      	bls.n	8000ffa <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000ff6:	233f      	movs	r3, #63	; 0x3f
 8000ff8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000ffa:	883b      	ldrh	r3, [r7, #0]
 8000ffc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ffe:	d901      	bls.n	8001004 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001000:	233f      	movs	r3, #63	; 0x3f
 8001002:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001004:	88fa      	ldrh	r2, [r7, #6]
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	429a      	cmp	r2, r3
 800100a:	d205      	bcs.n	8001018 <SSD1306_DrawLine+0x5a>
 800100c:	887a      	ldrh	r2, [r7, #2]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	b21b      	sxth	r3, r3
 8001016:	e004      	b.n	8001022 <SSD1306_DrawLine+0x64>
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21b      	sxth	r3, r3
 8001022:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	883b      	ldrh	r3, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d205      	bcs.n	8001038 <SSD1306_DrawLine+0x7a>
 800102c:	883a      	ldrh	r2, [r7, #0]
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	b21b      	sxth	r3, r3
 8001036:	e004      	b.n	8001042 <SSD1306_DrawLine+0x84>
 8001038:	88ba      	ldrh	r2, [r7, #4]
 800103a:	883b      	ldrh	r3, [r7, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21b      	sxth	r3, r3
 8001042:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001044:	88fa      	ldrh	r2, [r7, #6]
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	429a      	cmp	r2, r3
 800104a:	d201      	bcs.n	8001050 <SSD1306_DrawLine+0x92>
 800104c:	2301      	movs	r3, #1
 800104e:	e001      	b.n	8001054 <SSD1306_DrawLine+0x96>
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001056:	88ba      	ldrh	r2, [r7, #4]
 8001058:	883b      	ldrh	r3, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d201      	bcs.n	8001062 <SSD1306_DrawLine+0xa4>
 800105e:	2301      	movs	r3, #1
 8001060:	e001      	b.n	8001066 <SSD1306_DrawLine+0xa8>
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001068:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800106c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	dd06      	ble.n	8001082 <SSD1306_DrawLine+0xc4>
 8001074:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001078:	0fda      	lsrs	r2, r3, #31
 800107a:	4413      	add	r3, r2
 800107c:	105b      	asrs	r3, r3, #1
 800107e:	b21b      	sxth	r3, r3
 8001080:	e006      	b.n	8001090 <SSD1306_DrawLine+0xd2>
 8001082:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001086:	0fda      	lsrs	r2, r3, #31
 8001088:	4413      	add	r3, r2
 800108a:	105b      	asrs	r3, r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	b21b      	sxth	r3, r3
 8001090:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001092:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d129      	bne.n	80010ee <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800109a:	883a      	ldrh	r2, [r7, #0]
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d205      	bcs.n	80010ae <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80010a2:	883b      	ldrh	r3, [r7, #0]
 80010a4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80010aa:	893b      	ldrh	r3, [r7, #8]
 80010ac:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d205      	bcs.n	80010c2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80010be:	893b      	ldrh	r3, [r7, #8]
 80010c0:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	82bb      	strh	r3, [r7, #20]
 80010c6:	e00c      	b.n	80010e2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80010c8:	8ab9      	ldrh	r1, [r7, #20]
 80010ca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe5b 	bl	8000d8c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80010d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	82bb      	strh	r3, [r7, #20]
 80010e2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010e6:	883b      	ldrh	r3, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dded      	ble.n	80010c8 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 80010ec:	e05f      	b.n	80011ae <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 80010ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d129      	bne.n	800114a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80010f6:	883a      	ldrh	r2, [r7, #0]
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d205      	bcs.n	800110a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80010fe:	883b      	ldrh	r3, [r7, #0]
 8001100:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001106:	893b      	ldrh	r3, [r7, #8]
 8001108:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	429a      	cmp	r2, r3
 8001110:	d205      	bcs.n	800111e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800111a:	893b      	ldrh	r3, [r7, #8]
 800111c:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	82bb      	strh	r3, [r7, #20]
 8001122:	e00c      	b.n	800113e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001124:	8abb      	ldrh	r3, [r7, #20]
 8001126:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800112a:	88b9      	ldrh	r1, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe2d 	bl	8000d8c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001132:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	82bb      	strh	r3, [r7, #20]
 800113e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	429a      	cmp	r2, r3
 8001146:	dded      	ble.n	8001124 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8001148:	e031      	b.n	80011ae <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800114a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800114e:	88b9      	ldrh	r1, [r7, #4]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fe1a 	bl	8000d8c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001158:	88fa      	ldrh	r2, [r7, #6]
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	429a      	cmp	r2, r3
 800115e:	d103      	bne.n	8001168 <SSD1306_DrawLine+0x1aa>
 8001160:	88ba      	ldrh	r2, [r7, #4]
 8001162:	883b      	ldrh	r3, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d021      	beq.n	80011ac <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8001168:	8afb      	ldrh	r3, [r7, #22]
 800116a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800116c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001174:	425b      	negs	r3, r3
 8001176:	429a      	cmp	r2, r3
 8001178:	dd08      	ble.n	800118c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800117a:	8afa      	ldrh	r2, [r7, #22]
 800117c:	8a3b      	ldrh	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	b29b      	uxth	r3, r3
 8001182:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001184:	89fa      	ldrh	r2, [r7, #14]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4413      	add	r3, r2
 800118a:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 800118c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001190:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	dad8      	bge.n	800114a <SSD1306_DrawLine+0x18c>
			err += dx;
 8001198:	8afa      	ldrh	r2, [r7, #22]
 800119a:	8a7b      	ldrh	r3, [r7, #18]
 800119c:	4413      	add	r3, r2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80011a2:	89ba      	ldrh	r2, [r7, #12]
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80011aa:	e7ce      	b.n	800114a <SSD1306_DrawLine+0x18c>
			break;
 80011ac:	bf00      	nop
		}
	}
}
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	4603      	mov	r3, r0
 80011c8:	80bb      	strh	r3, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]
 80011ce:	4613      	mov	r3, r2
 80011d0:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	2b7f      	cmp	r3, #127	; 0x7f
 80011d6:	d853      	bhi.n	8001280 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	2b3f      	cmp	r3, #63	; 0x3f
 80011dc:	d850      	bhi.n	8001280 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	4413      	add	r3, r2
 80011e4:	2b7f      	cmp	r3, #127	; 0x7f
 80011e6:	dd03      	ble.n	80011f0 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80011ee:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80011f0:	88ba      	ldrh	r2, [r7, #4]
 80011f2:	883b      	ldrh	r3, [r7, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	2b3f      	cmp	r3, #63	; 0x3f
 80011f8:	dd03      	ble.n	8001202 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001200:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001202:	88fa      	ldrh	r2, [r7, #6]
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	4413      	add	r3, r2
 8001208:	b29a      	uxth	r2, r3
 800120a:	88bc      	ldrh	r4, [r7, #4]
 800120c:	88b9      	ldrh	r1, [r7, #4]
 800120e:	88f8      	ldrh	r0, [r7, #6]
 8001210:	7e3b      	ldrb	r3, [r7, #24]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4623      	mov	r3, r4
 8001216:	f7ff fed2 	bl	8000fbe <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800121a:	88ba      	ldrh	r2, [r7, #4]
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b299      	uxth	r1, r3
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	4413      	add	r3, r2
 8001228:	b29c      	uxth	r4, r3
 800122a:	88ba      	ldrh	r2, [r7, #4]
 800122c:	883b      	ldrh	r3, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b29a      	uxth	r2, r3
 8001232:	88f8      	ldrh	r0, [r7, #6]
 8001234:	7e3b      	ldrb	r3, [r7, #24]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	4622      	mov	r2, r4
 800123c:	f7ff febf 	bl	8000fbe <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001240:	88ba      	ldrh	r2, [r7, #4]
 8001242:	883b      	ldrh	r3, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	b29c      	uxth	r4, r3
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	88b9      	ldrh	r1, [r7, #4]
 800124c:	88f8      	ldrh	r0, [r7, #6]
 800124e:	7e3b      	ldrb	r3, [r7, #24]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	4623      	mov	r3, r4
 8001254:	f7ff feb3 	bl	8000fbe <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001258:	88fa      	ldrh	r2, [r7, #6]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	4413      	add	r3, r2
 800125e:	b298      	uxth	r0, r3
 8001260:	88fa      	ldrh	r2, [r7, #6]
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	4413      	add	r3, r2
 8001266:	b29c      	uxth	r4, r3
 8001268:	88ba      	ldrh	r2, [r7, #4]
 800126a:	883b      	ldrh	r3, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	b29a      	uxth	r2, r3
 8001270:	88b9      	ldrh	r1, [r7, #4]
 8001272:	7e3b      	ldrb	r3, [r7, #24]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	4613      	mov	r3, r2
 8001278:	4622      	mov	r2, r4
 800127a:	f7ff fea0 	bl	8000fbe <SSD1306_DrawLine>
 800127e:	e000      	b.n	8001282 <SSD1306_DrawRectangle+0xce>
		return;
 8001280:	bf00      	nop
}
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}

08001288 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b087      	sub	sp, #28
 800128c:	af02      	add	r7, sp, #8
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	4603      	mov	r3, r0
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]
 80012a2:	4613      	mov	r3, r2
 80012a4:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	2b7f      	cmp	r3, #127	; 0x7f
 80012aa:	d836      	bhi.n	800131a <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	2b3f      	cmp	r3, #63	; 0x3f
 80012b0:	d833      	bhi.n	800131a <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	4413      	add	r3, r2
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	dd03      	ble.n	80012c4 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80012c2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80012c4:	88ba      	ldrh	r2, [r7, #4]
 80012c6:	883b      	ldrh	r3, [r7, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	2b3f      	cmp	r3, #63	; 0x3f
 80012cc:	dd03      	ble.n	80012d6 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80012d4:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e018      	b.n	800130e <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	b299      	uxth	r1, r3
 80012e6:	88fa      	ldrh	r2, [r7, #6]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29c      	uxth	r4, r3
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	88f8      	ldrh	r0, [r7, #6]
 80012fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	4622      	mov	r2, r4
 8001304:	f7ff fe5b 	bl	8000fbe <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	3301      	adds	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	b29b      	uxth	r3, r3
 8001312:	883a      	ldrh	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d2e1      	bcs.n	80012dc <SSD1306_DrawFilledRectangle+0x54>
 8001318:	e000      	b.n	800131c <SSD1306_DrawFilledRectangle+0x94>
		return;
 800131a:	bf00      	nop
	}
}
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}

08001322 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fd18 	bl	8000d5c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800132c:	f7ff fce8 	bl	8000d00 <SSD1306_UpdateScreen>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <ssd1306_I2C_Init+0x24>)
 800133c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800133e:	e002      	b.n	8001346 <ssd1306_I2C_Init+0x12>
		p--;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f9      	bne.n	8001340 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	0003d090 	.word	0x0003d090

0800135c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b0c7      	sub	sp, #284	; 0x11c
 8001360:	af02      	add	r7, sp, #8
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800136a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800136e:	600a      	str	r2, [r1, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001376:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800137a:	4622      	mov	r2, r4
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001382:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800138e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001392:	460a      	mov	r2, r1
 8001394:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800139a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800139e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013a2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013b0:	e015      	b.n	80013de <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013ba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	441a      	add	r2, r3
 80013c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013c6:	3301      	adds	r3, #1
 80013c8:	7811      	ldrb	r1, [r2, #0]
 80013ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013ce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80013d2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80013d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013d8:	3301      	adds	r3, #1
 80013da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013e8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80013ec:	8812      	ldrh	r2, [r2, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8df      	bhi.n	80013b2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80013f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b299      	uxth	r1, r3
 80013fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001402:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	200a      	movs	r0, #10
 8001412:	9000      	str	r0, [sp, #0]
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <ssd1306_I2C_WriteMulti+0xc8>)
 8001416:	f000 fe6d 	bl	80020f4 <HAL_I2C_Master_Transmit>
}
 800141a:	bf00      	nop
 800141c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001420:	46bd      	mov	sp, r7
 8001422:	bd90      	pop	{r4, r7, pc}
 8001424:	2000009c 	.word	0x2000009c

08001428 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	460b      	mov	r3, r1
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	b299      	uxth	r1, r3
 8001446:	f107 020c 	add.w	r2, r7, #12
 800144a:	230a      	movs	r3, #10
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2302      	movs	r3, #2
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <ssd1306_I2C_Write+0x38>)
 8001452:	f000 fe4f 	bl	80020f4 <HAL_I2C_Master_Transmit>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000009c 	.word	0x2000009c

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_MspInit+0x5c>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_MspInit+0x5c>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_MspInit+0x5c>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_MspInit+0x5c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_MspInit+0x5c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_MspInit+0x5c>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_MspInit+0x60>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_MspInit+0x60>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <HAL_I2C_MspInit+0x70>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d123      	bne.n	8001530 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_I2C_MspInit+0x74>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_I2C_MspInit+0x74>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_I2C_MspInit+0x74>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001500:	23c0      	movs	r3, #192	; 0xc0
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4619      	mov	r1, r3
 8001512:	480b      	ldr	r0, [pc, #44]	; (8001540 <HAL_I2C_MspInit+0x78>)
 8001514:	f000 fb0e 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_I2C_MspInit+0x74>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_I2C_MspInit+0x74>)
 800151e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001522:	61d3      	str	r3, [r2, #28]
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_I2C_MspInit+0x74>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40005400 	.word	0x40005400
 800153c:	40021000 	.word	0x40021000
 8001540:	40010c00 	.word	0x40010c00

08001544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_UART_MspInit+0x8c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d131      	bne.n	80015c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_UART_MspInit+0x90>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_UART_MspInit+0x90>)
 800156a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0x90>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_UART_MspInit+0x90>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_UART_MspInit+0x90>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_UART_MspInit+0x90>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <HAL_UART_MspInit+0x94>)
 80015aa:	f000 fac3 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_UART_MspInit+0x94>)
 80015c4:	f000 fab6 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	201c      	movs	r0, #28
 80015f2:	f000 fa74 	bl	8001ade <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f6:	201c      	movs	r0, #28
 80015f8:	f000 fa8d 	bl	8001b16 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_InitTick+0xa4>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_InitTick+0xa4>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	61d3      	str	r3, [r2, #28]
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_InitTick+0xa4>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001614:	f107 0210 	add.w	r2, r7, #16
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f001 fd98 	bl	8003154 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001624:	f001 fd6e 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8001628:	4603      	mov	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_InitTick+0xa8>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9b      	lsrs	r3, r3, #18
 8001638:	3b01      	subs	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0xac>)
 800163e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001642:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_InitTick+0xac>)
 8001646:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_InitTick+0xac>)
 800164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001650:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_InitTick+0xac>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_InitTick+0xac>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <HAL_InitTick+0xac>)
 8001660:	f001 fdc6 	bl	80031f0 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <HAL_InitTick+0xac>)
 800166c:	f001 fe18 	bl	80032a0 <HAL_TIM_Base_Start_IT>
 8001670:	4603      	mov	r3, r0
 8001672:	e000      	b.n	8001676 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	431bde83 	.word	0x431bde83
 8001688:	2000053c 	.word	0x2000053c

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <TIM2_IRQHandler+0x10>)
 80016e2:	f001 fe2f 	bl	8003344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000053c 	.word	0x2000053c

080016f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <_kill>:

int _kill(int pid, int sig)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001708:	f002 fa1a 	bl	8003b40 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	2216      	movs	r2, #22
 8001710:	601a      	str	r2, [r3, #0]
	return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_exit>:

void _exit (int status)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001726:	f04f 31ff 	mov.w	r1, #4294967295
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffe7 	bl	80016fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001730:	e7fe      	b.n	8001730 <_exit+0x12>

08001732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00a      	b.n	800175a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001744:	f3af 8000 	nop.w
 8001748:	4601      	mov	r1, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	dbf0      	blt.n	8001744 <_read+0x12>
	}

return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e009      	b.n	8001792 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	dbf1      	blt.n	800177e <_write+0x12>
	}
	return len;
 800179a:	687b      	ldr	r3, [r7, #4]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_close>:

int _close(int file)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <_isatty>:

int _isatty(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f002 f984 	bl	8003b40 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20005000 	.word	0x20005000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000584 	.word	0x20000584
 800186c:	200005a0 	.word	0x200005a0

08001870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	; (80018c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018a2:	f7ff ffe5 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f002 f951 	bl	8003b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018aa:	f7fe fc4f 	bl	800014c <main>
  bx lr
 80018ae:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018b8:	08008a98 	.word	0x08008a98
  ldr r2, =_sbss
 80018bc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018c0:	2000059c 	.word	0x2000059c

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_Init+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_Init+0x28>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 f8f5 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	200f      	movs	r0, #15
 80018e0:	f7ff fe7c 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff fdbe 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40022000 	.word	0x40022000

080018f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_IncTick+0x1c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x20>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a03      	ldr	r2, [pc, #12]	; (8001914 <HAL_IncTick+0x20>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000018 	.word	0x20000018
 8001914:	20000588 	.word	0x20000588

08001918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <HAL_GetTick+0x10>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000588 	.word	0x20000588

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fff0 	bl	8001918 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffe0 	bl	8001918 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000018 	.word	0x20000018

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <__NVIC_EnableIRQ+0x34>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff4f 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff64 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ffb2 	bl	8001a64 <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff81 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff57 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e169      	b.n	8001e1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8158 	bne.w	8001e16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a9a      	ldr	r2, [pc, #616]	; (8001dd4 <HAL_GPIO_Init+0x2a0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d05e      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b70:	4a98      	ldr	r2, [pc, #608]	; (8001dd4 <HAL_GPIO_Init+0x2a0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d875      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b76:	4a98      	ldr	r2, [pc, #608]	; (8001dd8 <HAL_GPIO_Init+0x2a4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d058      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b7c:	4a96      	ldr	r2, [pc, #600]	; (8001dd8 <HAL_GPIO_Init+0x2a4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d86f      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b82:	4a96      	ldr	r2, [pc, #600]	; (8001ddc <HAL_GPIO_Init+0x2a8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d052      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b88:	4a94      	ldr	r2, [pc, #592]	; (8001ddc <HAL_GPIO_Init+0x2a8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d869      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b8e:	4a94      	ldr	r2, [pc, #592]	; (8001de0 <HAL_GPIO_Init+0x2ac>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d04c      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b94:	4a92      	ldr	r2, [pc, #584]	; (8001de0 <HAL_GPIO_Init+0x2ac>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d863      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b9a:	4a92      	ldr	r2, [pc, #584]	; (8001de4 <HAL_GPIO_Init+0x2b0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d046      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001ba0:	4a90      	ldr	r2, [pc, #576]	; (8001de4 <HAL_GPIO_Init+0x2b0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d85d      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d82a      	bhi.n	8001c00 <HAL_GPIO_Init+0xcc>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d859      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_GPIO_Init+0x80>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c09 	.word	0x08001c09
 8001bbc:	08001c1b 	.word	0x08001c1b
 8001bc0:	08001c5d 	.word	0x08001c5d
 8001bc4:	08001c63 	.word	0x08001c63
 8001bc8:	08001c63 	.word	0x08001c63
 8001bcc:	08001c63 	.word	0x08001c63
 8001bd0:	08001c63 	.word	0x08001c63
 8001bd4:	08001c63 	.word	0x08001c63
 8001bd8:	08001c63 	.word	0x08001c63
 8001bdc:	08001c63 	.word	0x08001c63
 8001be0:	08001c63 	.word	0x08001c63
 8001be4:	08001c63 	.word	0x08001c63
 8001be8:	08001c63 	.word	0x08001c63
 8001bec:	08001c63 	.word	0x08001c63
 8001bf0:	08001c63 	.word	0x08001c63
 8001bf4:	08001c63 	.word	0x08001c63
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c25 	.word	0x08001c25
 8001c00:	4a79      	ldr	r2, [pc, #484]	; (8001de8 <HAL_GPIO_Init+0x2b4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c06:	e02c      	b.n	8001c62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e029      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	3304      	adds	r3, #4
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e024      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e01f      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e01a      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c36:	2304      	movs	r3, #4
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e013      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c44:	2308      	movs	r3, #8
 8001c46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	611a      	str	r2, [r3, #16]
          break;
 8001c4e:	e009      	b.n	8001c64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c50:	2308      	movs	r3, #8
 8001c52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	615a      	str	r2, [r3, #20]
          break;
 8001c5a:	e003      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          break;
 8001c62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d801      	bhi.n	8001c6e <HAL_GPIO_Init+0x13a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_Init+0x13e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2bff      	cmp	r3, #255	; 0xff
 8001c78:	d802      	bhi.n	8001c80 <HAL_GPIO_Init+0x14c>
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x152>
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3b08      	subs	r3, #8
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	6a39      	ldr	r1, [r7, #32]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80b1 	beq.w	8001e16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x2bc>)
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <HAL_GPIO_Init+0x2c0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_GPIO_Init+0x1ec>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3f      	ldr	r2, [pc, #252]	; (8001df8 <HAL_GPIO_Init+0x2c4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1e8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3e      	ldr	r2, [pc, #248]	; (8001dfc <HAL_GPIO_Init+0x2c8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1e4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3d      	ldr	r2, [pc, #244]	; (8001e00 <HAL_GPIO_Init+0x2cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1e0>
 8001d10:	2303      	movs	r3, #3
 8001d12:	e006      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e004      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d20:	2300      	movs	r3, #0
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	f002 0203 	and.w	r2, r2, #3
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d32:	492f      	ldr	r1, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x2bc>)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	492c      	ldr	r1, [pc, #176]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4928      	ldr	r1, [pc, #160]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4922      	ldr	r1, [pc, #136]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	491e      	ldr	r1, [pc, #120]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4918      	ldr	r1, [pc, #96]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	4914      	ldr	r1, [pc, #80]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d021      	beq.n	8001e08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
 8001dd0:	e021      	b.n	8001e16 <HAL_GPIO_Init+0x2e2>
 8001dd2:	bf00      	nop
 8001dd4:	10320000 	.word	0x10320000
 8001dd8:	10310000 	.word	0x10310000
 8001ddc:	10220000 	.word	0x10220000
 8001de0:	10210000 	.word	0x10210000
 8001de4:	10120000 	.word	0x10120000
 8001de8:	10110000 	.word	0x10110000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40010800 	.word	0x40010800
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40011400 	.word	0x40011400
 8001e04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	4909      	ldr	r1, [pc, #36]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	3301      	adds	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f47f ae8e 	bne.w	8001b48 <HAL_GPIO_Init+0x14>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	372c      	adds	r7, #44	; 0x2c
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e12b      	b.n	80020d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fb18 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed0:	f001 f918 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8001ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a81      	ldr	r2, [pc, #516]	; (80020e0 <HAL_I2C_Init+0x274>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d807      	bhi.n	8001ef0 <HAL_I2C_Init+0x84>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a80      	ldr	r2, [pc, #512]	; (80020e4 <HAL_I2C_Init+0x278>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	bf94      	ite	ls
 8001ee8:	2301      	movls	r3, #1
 8001eea:	2300      	movhi	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e006      	b.n	8001efe <HAL_I2C_Init+0x92>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4a7d      	ldr	r2, [pc, #500]	; (80020e8 <HAL_I2C_Init+0x27c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	bf94      	ite	ls
 8001ef8:	2301      	movls	r3, #1
 8001efa:	2300      	movhi	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0e7      	b.n	80020d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a78      	ldr	r2, [pc, #480]	; (80020ec <HAL_I2C_Init+0x280>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a6a      	ldr	r2, [pc, #424]	; (80020e0 <HAL_I2C_Init+0x274>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d802      	bhi.n	8001f40 <HAL_I2C_Init+0xd4>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	e009      	b.n	8001f54 <HAL_I2C_Init+0xe8>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	4a69      	ldr	r2, [pc, #420]	; (80020f0 <HAL_I2C_Init+0x284>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	3301      	adds	r3, #1
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	495c      	ldr	r1, [pc, #368]	; (80020e0 <HAL_I2C_Init+0x274>)
 8001f70:	428b      	cmp	r3, r1
 8001f72:	d819      	bhi.n	8001fa8 <HAL_I2C_Init+0x13c>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e59      	subs	r1, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f82:	1c59      	adds	r1, r3, #1
 8001f84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f88:	400b      	ands	r3, r1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_I2C_Init+0x138>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1e59      	subs	r1, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa2:	e051      	b.n	8002048 <HAL_I2C_Init+0x1dc>
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e04f      	b.n	8002048 <HAL_I2C_Init+0x1dc>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d111      	bne.n	8001fd4 <HAL_I2C_Init+0x168>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e58      	subs	r0, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	440b      	add	r3, r1
 8001fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e012      	b.n	8001ffa <HAL_I2C_Init+0x18e>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	0099      	lsls	r1, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Init+0x196>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e022      	b.n	8002048 <HAL_I2C_Init+0x1dc>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10e      	bne.n	8002028 <HAL_I2C_Init+0x1bc>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1e58      	subs	r0, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	440b      	add	r3, r1
 8002018:	fbb0 f3f3 	udiv	r3, r0, r3
 800201c:	3301      	adds	r3, #1
 800201e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002026:	e00f      	b.n	8002048 <HAL_I2C_Init+0x1dc>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e58      	subs	r0, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	0099      	lsls	r1, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	fbb0 f3f3 	udiv	r3, r0, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	6809      	ldr	r1, [r1, #0]
 800204c:	4313      	orrs	r3, r2
 800204e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6911      	ldr	r1, [r2, #16]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68d2      	ldr	r2, [r2, #12]
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	430b      	orrs	r3, r1
 800208a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	000186a0 	.word	0x000186a0
 80020e4:	001e847f 	.word	0x001e847f
 80020e8:	003d08ff 	.word	0x003d08ff
 80020ec:	431bde83 	.word	0x431bde83
 80020f0:	10624dd3 	.word	0x10624dd3

080020f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	461a      	mov	r2, r3
 8002100:	460b      	mov	r3, r1
 8002102:	817b      	strh	r3, [r7, #10]
 8002104:	4613      	mov	r3, r2
 8002106:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff fc06 	bl	8001918 <HAL_GetTick>
 800210c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b20      	cmp	r3, #32
 8002118:	f040 80e0 	bne.w	80022dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2319      	movs	r3, #25
 8002122:	2201      	movs	r2, #1
 8002124:	4970      	ldr	r1, [pc, #448]	; (80022e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fa92 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	e0d3      	b.n	80022de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_I2C_Master_Transmit+0x50>
 8002140:	2302      	movs	r3, #2
 8002142:	e0cc      	b.n	80022de <HAL_I2C_Master_Transmit+0x1ea>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d007      	beq.n	800216a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2221      	movs	r2, #33	; 0x21
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2210      	movs	r2, #16
 8002186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	893a      	ldrh	r2, [r7, #8]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a50      	ldr	r2, [pc, #320]	; (80022ec <HAL_I2C_Master_Transmit+0x1f8>)
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021ac:	8979      	ldrh	r1, [r7, #10]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	6a3a      	ldr	r2, [r7, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f9ca 	bl	800254c <I2C_MasterRequestWrite>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e08d      	b.n	80022de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021d8:	e066      	b.n	80022a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	6a39      	ldr	r1, [r7, #32]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fb0c 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d107      	bne.n	8002202 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06b      	b.n	80022de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d11b      	bne.n	800227c <HAL_I2C_Master_Transmit+0x188>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d017      	beq.n	800227c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	6a39      	ldr	r1, [r7, #32]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fafc 	bl	800287e <I2C_WaitOnBTFFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00d      	beq.n	80022a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2b04      	cmp	r3, #4
 8002292:	d107      	bne.n	80022a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e01a      	b.n	80022de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d194      	bne.n	80021da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	00100002 	.word	0x00100002
 80022ec:	ffff0000 	.word	0xffff0000

080022f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fb0a 	bl	8001918 <HAL_GetTick>
 8002304:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002306:	2301      	movs	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	f040 8111 	bne.w	800253a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2319      	movs	r3, #25
 800231e:	2201      	movs	r2, #1
 8002320:	4988      	ldr	r1, [pc, #544]	; (8002544 <HAL_I2C_IsDeviceReady+0x254>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f994 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800232e:	2302      	movs	r3, #2
 8002330:	e104      	b.n	800253c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_I2C_IsDeviceReady+0x50>
 800233c:	2302      	movs	r3, #2
 800233e:	e0fd      	b.n	800253c <HAL_I2C_IsDeviceReady+0x24c>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d007      	beq.n	8002366 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2224      	movs	r2, #36	; 0x24
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4a70      	ldr	r2, [pc, #448]	; (8002548 <HAL_I2C_IsDeviceReady+0x258>)
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002398:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f952 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00d      	beq.n	80023ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c0:	d103      	bne.n	80023ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0b6      	b.n	800253c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ce:	897b      	ldrh	r3, [r7, #10]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff fa9b 	bl	8001918 <HAL_GetTick>
 80023e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002412:	e025      	b.n	8002460 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7ff fa80 	bl	8001918 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <HAL_I2C_IsDeviceReady+0x13a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	22a0      	movs	r2, #160	; 0xa0
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2ba0      	cmp	r3, #160	; 0xa0
 800246a:	d005      	beq.n	8002478 <HAL_I2C_IsDeviceReady+0x188>
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_I2C_IsDeviceReady+0x188>
 8002472:	7dbb      	ldrb	r3, [r7, #22]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0cd      	beq.n	8002414 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d129      	bne.n	80024e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2319      	movs	r3, #25
 80024ba:	2201      	movs	r2, #1
 80024bc:	4921      	ldr	r1, [pc, #132]	; (8002544 <HAL_I2C_IsDeviceReady+0x254>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f8c6 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e036      	b.n	800253c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e02c      	b.n	800253c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2319      	movs	r3, #25
 8002502:	2201      	movs	r2, #1
 8002504:	490f      	ldr	r1, [pc, #60]	; (8002544 <HAL_I2C_IsDeviceReady+0x254>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f8a2 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e012      	b.n	800253c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	3301      	adds	r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	f4ff af32 	bcc.w	800238a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
  }
}
 800253c:	4618      	mov	r0, r3
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	00100002 	.word	0x00100002
 8002548:	ffff0000 	.word	0xffff0000

0800254c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	460b      	mov	r3, r1
 800255a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d006      	beq.n	8002576 <I2C_MasterRequestWrite+0x2a>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d003      	beq.n	8002576 <I2C_MasterRequestWrite+0x2a>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002574:	d108      	bne.n	8002588 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e00b      	b.n	80025a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	2b12      	cmp	r3, #18
 800258e:	d107      	bne.n	80025a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f84f 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c6:	d103      	bne.n	80025d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e035      	b.n	8002640 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025dc:	d108      	bne.n	80025f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025de:	897b      	ldrh	r3, [r7, #10]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025ec:	611a      	str	r2, [r3, #16]
 80025ee:	e01b      	b.n	8002628 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	11db      	asrs	r3, r3, #7
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f003 0306 	and.w	r3, r3, #6
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f063 030f 	orn	r3, r3, #15
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <I2C_MasterRequestWrite+0xfc>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f875 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e010      	b.n	8002640 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4907      	ldr	r1, [pc, #28]	; (800264c <I2C_MasterRequestWrite+0x100>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f865 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	00010008 	.word	0x00010008
 800264c:	00010002 	.word	0x00010002

08002650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002660:	e025      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d021      	beq.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7ff f955 	bl	8001918 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d116      	bne.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e023      	b.n	80026f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10d      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	e00c      	b.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d0b6      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800270c:	e051      	b.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d123      	bne.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002736:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e046      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d021      	beq.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7ff f8d3 	bl	8001918 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e020      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10c      	bne.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e00b      	b.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	43da      	mvns	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d18d      	bne.n	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002808:	e02d      	b.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f878 	bl	8002900 <I2C_IsAcknowledgeFailed>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02d      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d021      	beq.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7ff f879 	bl	8001918 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d116      	bne.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e007      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d1ca      	bne.n	800280a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800288a:	e02d      	b.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f837 	bl	8002900 <I2C_IsAcknowledgeFailed>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e02d      	b.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d021      	beq.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a4:	f7ff f838 	bl	8001918 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d302      	bcc.n	80028ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e007      	b.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d1ca      	bne.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d11b      	bne.n	8002950 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002920:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f043 0204 	orr.w	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e272      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8087 	beq.w	8002a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800297c:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b04      	cmp	r3, #4
 8002986:	d00c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002988:	4b8f      	ldr	r3, [pc, #572]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d112      	bne.n	80029ba <HAL_RCC_OscConfig+0x5e>
 8002994:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a0:	d10b      	bne.n	80029ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a2:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x12c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d168      	bne.n	8002a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e24c      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x76>
 80029c4:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a7f      	ldr	r2, [pc, #508]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e02e      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x98>
 80029da:	4b7b      	ldr	r3, [pc, #492]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7a      	ldr	r2, [pc, #488]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b78      	ldr	r3, [pc, #480]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a77      	ldr	r2, [pc, #476]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0xbc>
 80029fe:	4b72      	ldr	r3, [pc, #456]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a71      	ldr	r2, [pc, #452]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 8002a18:	4b6b      	ldr	r3, [pc, #428]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a67      	ldr	r2, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe ff6e 	bl	8001918 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe ff6a 	bl	8001918 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e200      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe4>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe ff5a 	bl	8001918 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe ff56 	bl	8001918 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1ec      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x10c>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d063      	beq.n	8002b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a96:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aa2:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x18c>
 8002aae:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x176>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e1c0      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4939      	ldr	r1, [pc, #228]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e03a      	b.n	8002b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_RCC_OscConfig+0x270>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe ff0f 	bl	8001918 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe ff0b 	bl	8001918 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1a1      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4927      	ldr	r1, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_RCC_OscConfig+0x270>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe feee 	bl	8001918 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b40:	f7fe feea 	bl	8001918 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e180      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03a      	beq.n	8002be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d019      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fece 	bl	8001918 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fe feca 	bl	8001918 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e160      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f000 fb08 	bl	80031b4 <RCC_Delay>
 8002ba4:	e01c      	b.n	8002be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bac:	f7fe feb4 	bl	8001918 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7fe feb0 	bl	8001918 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d908      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e146      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	42420000 	.word	0x42420000
 8002bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b92      	ldr	r3, [pc, #584]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e9      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a6 	beq.w	8002d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4a87      	ldr	r2, [pc, #540]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	61d3      	str	r3, [r2, #28]
 8002c0a:	4b85      	ldr	r3, [pc, #532]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c16:	2301      	movs	r3, #1
 8002c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d118      	bne.n	8002c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	; (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fe71 	bl	8001918 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7fe fe6d 	bl	8001918 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	; 0x64
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e103      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x4c8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x312>
 8002c60:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	e02d      	b.n	8002cca <HAL_RCC_OscConfig+0x36e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x334>
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6213      	str	r3, [r2, #32]
 8002c82:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a66      	ldr	r2, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	e01c      	b.n	8002cca <HAL_RCC_OscConfig+0x36e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x356>
 8002c98:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0x36e>
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a5a      	ldr	r2, [pc, #360]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a57      	ldr	r2, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d015      	beq.n	8002cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fe21 	bl	8001918 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe fe1d 	bl	8001918 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0b1      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ee      	beq.n	8002cda <HAL_RCC_OscConfig+0x37e>
 8002cfc:	e014      	b.n	8002d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fe0b 	bl	8001918 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe fe07 	bl	8001918 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e09b      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	4b40      	ldr	r3, [pc, #256]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4b3c      	ldr	r3, [pc, #240]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4a3b      	ldr	r2, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8087 	beq.w	8002e52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d061      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d146      	bne.n	8002de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fddb 	bl	8001918 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fdd7 	bl	8001918 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e06d      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4921      	ldr	r1, [pc, #132]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da0:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a19      	ldr	r1, [r3, #32]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	430b      	orrs	r3, r1
 8002db2:	491b      	ldr	r1, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fdab 	bl	8001918 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe fda7 	bl	8001918 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e03d      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x46a>
 8002de4:	e035      	b.n	8002e52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCC_OscConfig+0x4cc>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe fd94 	bl	8001918 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe fd90 	bl	8001918 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e026      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x498>
 8002e12:	e01e      	b.n	8002e52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e019      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x500>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d0      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4965      	ldr	r1, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d040      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e073      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4936      	ldr	r1, [pc, #216]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fce2 	bl	8001918 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fe fcde 	bl	8001918 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e053      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d210      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 0207 	bic.w	r2, r3, #7
 8002f96:	4922      	ldr	r1, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1cc>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1d0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fae4 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40022000 	.word	0x40022000
 8003024:	40021000 	.word	0x40021000
 8003028:	08008808 	.word	0x08008808
 800302c:	20000010 	.word	0x20000010
 8003030:	20000014 	.word	0x20000014

08003034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b490      	push	{r4, r7}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800303a:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800303c:	1d3c      	adds	r4, r7, #4
 800303e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003044:	f240 2301 	movw	r3, #513	; 0x201
 8003048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b04      	cmp	r3, #4
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x46>
 8003072:	e02b      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003074:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003076:	623b      	str	r3, [r7, #32]
      break;
 8003078:	e02b      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	0c9b      	lsrs	r3, r3, #18
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3328      	adds	r3, #40	; 0x28
 8003084:	443b      	add	r3, r7
 8003086:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800308a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0c5b      	lsrs	r3, r3, #17
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	3328      	adds	r3, #40	; 0x28
 80030a2:	443b      	add	r3, r7
 80030a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ae:	fb03 f202 	mul.w	r2, r3, r2
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ba:	e004      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c0:	fb02 f303 	mul.w	r3, r2, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	623b      	str	r3, [r7, #32]
      break;
 80030ca:	e002      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ce:	623b      	str	r3, [r7, #32]
      break;
 80030d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d2:	6a3b      	ldr	r3, [r7, #32]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc90      	pop	{r4, r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	08004e6c 	.word	0x08004e6c
 80030e4:	40021000 	.word	0x40021000
 80030e8:	007a1200 	.word	0x007a1200
 80030ec:	003d0900 	.word	0x003d0900

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <HAL_RCC_GetHCLKFreq+0x10>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	20000010 	.word	0x20000010

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003108:	f7ff fff2 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08008818 	.word	0x08008818

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003130:	f7ff ffde 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0adb      	lsrs	r3, r3, #11
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	08008818 	.word	0x08008818

08003154 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	220f      	movs	r2, #15
 8003162:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_RCC_GetClockConfig+0x58>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCC_GetClockConfig+0x58>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_GetClockConfig+0x58>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_RCC_GetClockConfig+0x58>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0207 	and.w	r2, r3, #7
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022000 	.word	0x40022000

080031b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <RCC_Delay+0x34>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <RCC_Delay+0x38>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0a5b      	lsrs	r3, r3, #9
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d0:	bf00      	nop
  }
  while (Delay --);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1e5a      	subs	r2, r3, #1
 80031d6:	60fa      	str	r2, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f9      	bne.n	80031d0 <RCC_Delay+0x1c>
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	20000010 	.word	0x20000010
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e041      	b.n	8003286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f839 	bl	800328e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f000 f9b4 	bl	800359c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e03a      	b.n	800332e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_TIM_Base_Start_IT+0x98>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x58>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d009      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x58>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <HAL_TIM_Base_Start_IT+0x9c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x58>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a13      	ldr	r2, [pc, #76]	; (8003340 <HAL_TIM_Base_Start_IT+0xa0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d111      	bne.n	800331c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b06      	cmp	r3, #6
 8003308:	d010      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331a:	e007      	b.n	800332c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800

08003344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d122      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b02      	cmp	r3, #2
 8003366:	d11b      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0202 	mvn.w	r2, #2
 8003370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8ed 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8e0 	bl	8003554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8ef 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0204 	mvn.w	r2, #4
 80033c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8c3 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8b6 	bl	8003554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f8c5 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0208 	mvn.w	r2, #8
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2204      	movs	r2, #4
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f899 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f88c 	bl	8003554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f89b 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b10      	cmp	r3, #16
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0210 	mvn.w	r2, #16
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2208      	movs	r2, #8
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f86f 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f862 	bl	8003554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f871 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d10e      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0201 	mvn.w	r2, #1
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fadc 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d10e      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d107      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8bf 	bl	8003672 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d10e      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d107      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f835 	bl	800358a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b20      	cmp	r3, #32
 800352c:	d10e      	bne.n	800354c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d107      	bne.n	800354c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0220 	mvn.w	r2, #32
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f88a 	bl	8003660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a29      	ldr	r2, [pc, #164]	; (8003654 <TIM_Base_SetConfig+0xb8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0x30>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0x30>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a26      	ldr	r2, [pc, #152]	; (8003658 <TIM_Base_SetConfig+0xbc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x30>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a25      	ldr	r2, [pc, #148]	; (800365c <TIM_Base_SetConfig+0xc0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d108      	bne.n	80035de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <TIM_Base_SetConfig+0xb8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_Base_SetConfig+0x62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d007      	beq.n	80035fe <TIM_Base_SetConfig+0x62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <TIM_Base_SetConfig+0xbc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_Base_SetConfig+0x62>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <TIM_Base_SetConfig+0xc0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d108      	bne.n	8003610 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a07      	ldr	r2, [pc, #28]	; (8003654 <TIM_Base_SetConfig+0xb8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d103      	bne.n	8003644 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	615a      	str	r2, [r3, #20]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800

08003660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e03f      	b.n	8003716 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd ff4a 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	; 0x24
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f9a7 	bl	8003a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b08a      	sub	sp, #40	; 0x28
 8003722:	af02      	add	r7, sp, #8
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b20      	cmp	r3, #32
 800373c:	d17c      	bne.n	8003838 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_UART_Transmit+0x2c>
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e075      	b.n	800383a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x3e>
 8003758:	2302      	movs	r3, #2
 800375a:	e06e      	b.n	800383a <HAL_UART_Transmit+0x11c>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2221      	movs	r2, #33	; 0x21
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003772:	f7fe f8d1 	bl	8001918 <HAL_GetTick>
 8003776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d108      	bne.n	80037a0 <HAL_UART_Transmit+0x82>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e003      	b.n	80037a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037b0:	e02a      	b.n	8003808 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f8e2 	bl	8003986 <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e036      	b.n	800383a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	3302      	adds	r3, #2
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	e007      	b.n	80037fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1cf      	bne.n	80037b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	2140      	movs	r1, #64	; 0x40
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f8b2 	bl	8003986 <UART_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e006      	b.n	800383a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b08a      	sub	sp, #40	; 0x28
 8003846:	af02      	add	r7, sp, #8
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	f040 808c 	bne.w	800397c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_UART_Receive+0x2e>
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e084      	b.n	800397e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_UART_Receive+0x40>
 800387e:	2302      	movs	r3, #2
 8003880:	e07d      	b.n	800397e <HAL_UART_Receive+0x13c>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2222      	movs	r2, #34	; 0x22
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389e:	f7fe f83b 	bl	8001918 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d108      	bne.n	80038cc <HAL_UART_Receive+0x8a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e003      	b.n	80038d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038dc:	e043      	b.n	8003966 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2120      	movs	r1, #32
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f84c 	bl	8003986 <UART_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e042      	b.n	800397e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	b29a      	uxth	r2, r3
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	3302      	adds	r3, #2
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e01f      	b.n	8003958 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d007      	beq.n	8003932 <HAL_UART_Receive+0xf0>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_UART_Receive+0xfe>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e008      	b.n	8003952 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394c:	b2da      	uxtb	r2, r3
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1b6      	bne.n	80038de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	e02c      	b.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d028      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80039a6:	f7fd ffb7 	bl	8001918 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d21d      	bcs.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e00f      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d0c3      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a56:	f023 030c 	bic.w	r3, r3, #12
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <UART_SetConfig+0x114>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d103      	bne.n	8003a8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a84:	f7ff fb52 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	e002      	b.n	8003a92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7ff fb3a 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8003a90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <UART_SetConfig+0x118>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	0119      	lsls	r1, r3, #4
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <UART_SetConfig+0x118>)
 8003aca:	fba3 0302 	umull	r0, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2064      	movs	r0, #100	; 0x64
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	3332      	adds	r3, #50	; 0x32
 8003adc:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <UART_SetConfig+0x118>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae8:	4419      	add	r1, r3
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009a      	lsls	r2, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <UART_SetConfig+0x118>)
 8003b02:	fba3 0302 	umull	r0, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2064      	movs	r0, #100	; 0x64
 8003b0a:	fb00 f303 	mul.w	r3, r0, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	; 0x32
 8003b14:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <UART_SetConfig+0x118>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	440a      	add	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40013800 	.word	0x40013800
 8003b34:	51eb851f 	.word	0x51eb851f

08003b38 <atoi>:
 8003b38:	220a      	movs	r2, #10
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f000 b924 	b.w	8003d88 <strtol>

08003b40 <__errno>:
 8003b40:	4b01      	ldr	r3, [pc, #4]	; (8003b48 <__errno+0x8>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	2000001c 	.word	0x2000001c

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	2600      	movs	r6, #0
 8003b50:	4d0c      	ldr	r5, [pc, #48]	; (8003b84 <__libc_init_array+0x38>)
 8003b52:	4c0d      	ldr	r4, [pc, #52]	; (8003b88 <__libc_init_array+0x3c>)
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	42a6      	cmp	r6, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	f001 f960 	bl	8004e20 <_init>
 8003b60:	2600      	movs	r6, #0
 8003b62:	4d0a      	ldr	r5, [pc, #40]	; (8003b8c <__libc_init_array+0x40>)
 8003b64:	4c0a      	ldr	r4, [pc, #40]	; (8003b90 <__libc_init_array+0x44>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	42a6      	cmp	r6, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b74:	4798      	blx	r3
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7e:	4798      	blx	r3
 8003b80:	3601      	adds	r6, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	08008a90 	.word	0x08008a90
 8003b88:	08008a90 	.word	0x08008a90
 8003b8c:	08008a90 	.word	0x08008a90
 8003b90:	08008a94 	.word	0x08008a94

08003b94 <__itoa>:
 8003b94:	1e93      	subs	r3, r2, #2
 8003b96:	2b22      	cmp	r3, #34	; 0x22
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	d904      	bls.n	8003ba8 <__itoa+0x14>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	700b      	strb	r3, [r1, #0]
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	bd10      	pop	{r4, pc}
 8003ba8:	2a0a      	cmp	r2, #10
 8003baa:	d109      	bne.n	8003bc0 <__itoa+0x2c>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	da07      	bge.n	8003bc0 <__itoa+0x2c>
 8003bb0:	232d      	movs	r3, #45	; 0x2d
 8003bb2:	700b      	strb	r3, [r1, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4240      	negs	r0, r0
 8003bb8:	4421      	add	r1, r4
 8003bba:	f000 f8ef 	bl	8003d9c <__utoa>
 8003bbe:	e7f1      	b.n	8003ba4 <__itoa+0x10>
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	e7f9      	b.n	8003bb8 <__itoa+0x24>

08003bc4 <itoa>:
 8003bc4:	f7ff bfe6 	b.w	8003b94 <__itoa>

08003bc8 <memset>:
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4402      	add	r2, r0
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d100      	bne.n	8003bd2 <memset+0xa>
 8003bd0:	4770      	bx	lr
 8003bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd6:	e7f9      	b.n	8003bcc <memset+0x4>

08003bd8 <strtok>:
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <strtok+0x5c>)
 8003bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bde:	681f      	ldr	r7, [r3, #0]
 8003be0:	4605      	mov	r5, r0
 8003be2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003be4:	460e      	mov	r6, r1
 8003be6:	b9ec      	cbnz	r4, 8003c24 <strtok+0x4c>
 8003be8:	2050      	movs	r0, #80	; 0x50
 8003bea:	f000 f949 	bl	8003e80 <malloc>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	65b8      	str	r0, [r7, #88]	; 0x58
 8003bf2:	b920      	cbnz	r0, 8003bfe <strtok+0x26>
 8003bf4:	2157      	movs	r1, #87	; 0x57
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <strtok+0x60>)
 8003bf8:	4810      	ldr	r0, [pc, #64]	; (8003c3c <strtok+0x64>)
 8003bfa:	f000 f911 	bl	8003e20 <__assert_func>
 8003bfe:	e9c0 4400 	strd	r4, r4, [r0]
 8003c02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003c06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003c0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003c0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003c12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003c16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003c1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003c1e:	6184      	str	r4, [r0, #24]
 8003c20:	7704      	strb	r4, [r0, #28]
 8003c22:	6244      	str	r4, [r0, #36]	; 0x24
 8003c24:	4631      	mov	r1, r6
 8003c26:	4628      	mov	r0, r5
 8003c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c30:	f000 b806 	b.w	8003c40 <__strtok_r>
 8003c34:	2000001c 	.word	0x2000001c
 8003c38:	08008824 	.word	0x08008824
 8003c3c:	0800883b 	.word	0x0800883b

08003c40 <__strtok_r>:
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	b908      	cbnz	r0, 8003c48 <__strtok_r+0x8>
 8003c44:	6810      	ldr	r0, [r2, #0]
 8003c46:	b188      	cbz	r0, 8003c6c <__strtok_r+0x2c>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	460f      	mov	r7, r1
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003c52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003c56:	b91e      	cbnz	r6, 8003c60 <__strtok_r+0x20>
 8003c58:	b965      	cbnz	r5, 8003c74 <__strtok_r+0x34>
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	6015      	str	r5, [r2, #0]
 8003c5e:	e005      	b.n	8003c6c <__strtok_r+0x2c>
 8003c60:	42b5      	cmp	r5, r6
 8003c62:	d1f6      	bne.n	8003c52 <__strtok_r+0x12>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <__strtok_r+0xa>
 8003c68:	6014      	str	r4, [r2, #0]
 8003c6a:	7003      	strb	r3, [r0, #0]
 8003c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6e:	461c      	mov	r4, r3
 8003c70:	e00c      	b.n	8003c8c <__strtok_r+0x4c>
 8003c72:	b915      	cbnz	r5, 8003c7a <__strtok_r+0x3a>
 8003c74:	460e      	mov	r6, r1
 8003c76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003c7e:	42ab      	cmp	r3, r5
 8003c80:	d1f7      	bne.n	8003c72 <__strtok_r+0x32>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f3      	beq.n	8003c6e <__strtok_r+0x2e>
 8003c86:	2300      	movs	r3, #0
 8003c88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003c8c:	6014      	str	r4, [r2, #0]
 8003c8e:	e7ed      	b.n	8003c6c <__strtok_r+0x2c>

08003c90 <_strtol_l.constprop.0>:
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c96:	4680      	mov	r8, r0
 8003c98:	d001      	beq.n	8003c9e <_strtol_l.constprop.0+0xe>
 8003c9a:	2b24      	cmp	r3, #36	; 0x24
 8003c9c:	d906      	bls.n	8003cac <_strtol_l.constprop.0+0x1c>
 8003c9e:	f7ff ff4f 	bl	8003b40 <__errno>
 8003ca2:	2316      	movs	r3, #22
 8003ca4:	6003      	str	r3, [r0, #0]
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cac:	460d      	mov	r5, r1
 8003cae:	4f35      	ldr	r7, [pc, #212]	; (8003d84 <_strtol_l.constprop.0+0xf4>)
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cb6:	5de6      	ldrb	r6, [r4, r7]
 8003cb8:	f016 0608 	ands.w	r6, r6, #8
 8003cbc:	d1f8      	bne.n	8003cb0 <_strtol_l.constprop.0+0x20>
 8003cbe:	2c2d      	cmp	r4, #45	; 0x2d
 8003cc0:	d12f      	bne.n	8003d22 <_strtol_l.constprop.0+0x92>
 8003cc2:	2601      	movs	r6, #1
 8003cc4:	782c      	ldrb	r4, [r5, #0]
 8003cc6:	1c85      	adds	r5, r0, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d057      	beq.n	8003d7c <_strtol_l.constprop.0+0xec>
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d109      	bne.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003cd0:	2c30      	cmp	r4, #48	; 0x30
 8003cd2:	d107      	bne.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003cd4:	7828      	ldrb	r0, [r5, #0]
 8003cd6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003cda:	2858      	cmp	r0, #88	; 0x58
 8003cdc:	d149      	bne.n	8003d72 <_strtol_l.constprop.0+0xe2>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	786c      	ldrb	r4, [r5, #1]
 8003ce2:	3502      	adds	r5, #2
 8003ce4:	2700      	movs	r7, #0
 8003ce6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003cea:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003cee:	fbbe f9f3 	udiv	r9, lr, r3
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	fb03 ea19 	mls	sl, r3, r9, lr
 8003cf8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003cfc:	f1bc 0f09 	cmp.w	ip, #9
 8003d00:	d814      	bhi.n	8003d2c <_strtol_l.constprop.0+0x9c>
 8003d02:	4664      	mov	r4, ip
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	dd22      	ble.n	8003d4e <_strtol_l.constprop.0+0xbe>
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	db1d      	blt.n	8003d48 <_strtol_l.constprop.0+0xb8>
 8003d0c:	4581      	cmp	r9, r0
 8003d0e:	d31b      	bcc.n	8003d48 <_strtol_l.constprop.0+0xb8>
 8003d10:	d101      	bne.n	8003d16 <_strtol_l.constprop.0+0x86>
 8003d12:	45a2      	cmp	sl, r4
 8003d14:	db18      	blt.n	8003d48 <_strtol_l.constprop.0+0xb8>
 8003d16:	2701      	movs	r7, #1
 8003d18:	fb00 4003 	mla	r0, r0, r3, r4
 8003d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d20:	e7ea      	b.n	8003cf8 <_strtol_l.constprop.0+0x68>
 8003d22:	2c2b      	cmp	r4, #43	; 0x2b
 8003d24:	bf04      	itt	eq
 8003d26:	782c      	ldrbeq	r4, [r5, #0]
 8003d28:	1c85      	addeq	r5, r0, #2
 8003d2a:	e7cd      	b.n	8003cc8 <_strtol_l.constprop.0+0x38>
 8003d2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003d30:	f1bc 0f19 	cmp.w	ip, #25
 8003d34:	d801      	bhi.n	8003d3a <_strtol_l.constprop.0+0xaa>
 8003d36:	3c37      	subs	r4, #55	; 0x37
 8003d38:	e7e4      	b.n	8003d04 <_strtol_l.constprop.0+0x74>
 8003d3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003d3e:	f1bc 0f19 	cmp.w	ip, #25
 8003d42:	d804      	bhi.n	8003d4e <_strtol_l.constprop.0+0xbe>
 8003d44:	3c57      	subs	r4, #87	; 0x57
 8003d46:	e7dd      	b.n	8003d04 <_strtol_l.constprop.0+0x74>
 8003d48:	f04f 37ff 	mov.w	r7, #4294967295
 8003d4c:	e7e6      	b.n	8003d1c <_strtol_l.constprop.0+0x8c>
 8003d4e:	2f00      	cmp	r7, #0
 8003d50:	da07      	bge.n	8003d62 <_strtol_l.constprop.0+0xd2>
 8003d52:	2322      	movs	r3, #34	; 0x22
 8003d54:	4670      	mov	r0, lr
 8003d56:	f8c8 3000 	str.w	r3, [r8]
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	d0a4      	beq.n	8003ca8 <_strtol_l.constprop.0+0x18>
 8003d5e:	1e69      	subs	r1, r5, #1
 8003d60:	e005      	b.n	8003d6e <_strtol_l.constprop.0+0xde>
 8003d62:	b106      	cbz	r6, 8003d66 <_strtol_l.constprop.0+0xd6>
 8003d64:	4240      	negs	r0, r0
 8003d66:	2a00      	cmp	r2, #0
 8003d68:	d09e      	beq.n	8003ca8 <_strtol_l.constprop.0+0x18>
 8003d6a:	2f00      	cmp	r7, #0
 8003d6c:	d1f7      	bne.n	8003d5e <_strtol_l.constprop.0+0xce>
 8003d6e:	6011      	str	r1, [r2, #0]
 8003d70:	e79a      	b.n	8003ca8 <_strtol_l.constprop.0+0x18>
 8003d72:	2430      	movs	r4, #48	; 0x30
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1b5      	bne.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	e7b3      	b.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003d7c:	2c30      	cmp	r4, #48	; 0x30
 8003d7e:	d0a9      	beq.n	8003cd4 <_strtol_l.constprop.0+0x44>
 8003d80:	230a      	movs	r3, #10
 8003d82:	e7af      	b.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003d84:	080088fa 	.word	0x080088fa

08003d88 <strtol>:
 8003d88:	4613      	mov	r3, r2
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4802      	ldr	r0, [pc, #8]	; (8003d98 <strtol+0x10>)
 8003d90:	6800      	ldr	r0, [r0, #0]
 8003d92:	f7ff bf7d 	b.w	8003c90 <_strtol_l.constprop.0>
 8003d96:	bf00      	nop
 8003d98:	2000001c 	.word	0x2000001c

08003d9c <__utoa>:
 8003d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9e:	b08b      	sub	sp, #44	; 0x2c
 8003da0:	4605      	mov	r5, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	466e      	mov	r6, sp
 8003da6:	4c1d      	ldr	r4, [pc, #116]	; (8003e1c <__utoa+0x80>)
 8003da8:	f104 0c20 	add.w	ip, r4, #32
 8003dac:	4637      	mov	r7, r6
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	6861      	ldr	r1, [r4, #4]
 8003db2:	3408      	adds	r4, #8
 8003db4:	c703      	stmia	r7!, {r0, r1}
 8003db6:	4564      	cmp	r4, ip
 8003db8:	463e      	mov	r6, r7
 8003dba:	d1f7      	bne.n	8003dac <__utoa+0x10>
 8003dbc:	7921      	ldrb	r1, [r4, #4]
 8003dbe:	6820      	ldr	r0, [r4, #0]
 8003dc0:	7139      	strb	r1, [r7, #4]
 8003dc2:	1e91      	subs	r1, r2, #2
 8003dc4:	2922      	cmp	r1, #34	; 0x22
 8003dc6:	6038      	str	r0, [r7, #0]
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	d904      	bls.n	8003dd8 <__utoa+0x3c>
 8003dce:	7019      	strb	r1, [r3, #0]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	b00b      	add	sp, #44	; 0x2c
 8003dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd8:	1e58      	subs	r0, r3, #1
 8003dda:	4684      	mov	ip, r0
 8003ddc:	fbb5 f7f2 	udiv	r7, r5, r2
 8003de0:	fb02 5617 	mls	r6, r2, r7, r5
 8003de4:	3628      	adds	r6, #40	; 0x28
 8003de6:	446e      	add	r6, sp
 8003de8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003dec:	460c      	mov	r4, r1
 8003dee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003df2:	462e      	mov	r6, r5
 8003df4:	42b2      	cmp	r2, r6
 8003df6:	463d      	mov	r5, r7
 8003df8:	f101 0101 	add.w	r1, r1, #1
 8003dfc:	d9ee      	bls.n	8003ddc <__utoa+0x40>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	545a      	strb	r2, [r3, r1]
 8003e02:	1919      	adds	r1, r3, r4
 8003e04:	1aa5      	subs	r5, r4, r2
 8003e06:	42aa      	cmp	r2, r5
 8003e08:	dae3      	bge.n	8003dd2 <__utoa+0x36>
 8003e0a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003e0e:	780e      	ldrb	r6, [r1, #0]
 8003e10:	3201      	adds	r2, #1
 8003e12:	7006      	strb	r6, [r0, #0]
 8003e14:	f801 5901 	strb.w	r5, [r1], #-1
 8003e18:	e7f4      	b.n	8003e04 <__utoa+0x68>
 8003e1a:	bf00      	nop
 8003e1c:	08008898 	.word	0x08008898

08003e20 <__assert_func>:
 8003e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e22:	4614      	mov	r4, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <__assert_func+0x2c>)
 8003e28:	4605      	mov	r5, r0
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68d8      	ldr	r0, [r3, #12]
 8003e2e:	b14c      	cbz	r4, 8003e44 <__assert_func+0x24>
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <__assert_func+0x30>)
 8003e32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003e36:	9100      	str	r1, [sp, #0]
 8003e38:	462b      	mov	r3, r5
 8003e3a:	4906      	ldr	r1, [pc, #24]	; (8003e54 <__assert_func+0x34>)
 8003e3c:	f000 f80e 	bl	8003e5c <fiprintf>
 8003e40:	f000 fcc0 	bl	80047c4 <abort>
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <__assert_func+0x38>)
 8003e46:	461c      	mov	r4, r3
 8003e48:	e7f3      	b.n	8003e32 <__assert_func+0x12>
 8003e4a:	bf00      	nop
 8003e4c:	2000001c 	.word	0x2000001c
 8003e50:	080088bd 	.word	0x080088bd
 8003e54:	080088ca 	.word	0x080088ca
 8003e58:	080088f8 	.word	0x080088f8

08003e5c <fiprintf>:
 8003e5c:	b40e      	push	{r1, r2, r3}
 8003e5e:	b503      	push	{r0, r1, lr}
 8003e60:	4601      	mov	r1, r0
 8003e62:	ab03      	add	r3, sp, #12
 8003e64:	4805      	ldr	r0, [pc, #20]	; (8003e7c <fiprintf+0x20>)
 8003e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	f000 f913 	bl	8004098 <_vfiprintf_r>
 8003e72:	b002      	add	sp, #8
 8003e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e78:	b003      	add	sp, #12
 8003e7a:	4770      	bx	lr
 8003e7c:	2000001c 	.word	0x2000001c

08003e80 <malloc>:
 8003e80:	4b02      	ldr	r3, [pc, #8]	; (8003e8c <malloc+0xc>)
 8003e82:	4601      	mov	r1, r0
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	f000 b86b 	b.w	8003f60 <_malloc_r>
 8003e8a:	bf00      	nop
 8003e8c:	2000001c 	.word	0x2000001c

08003e90 <_free_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4605      	mov	r5, r0
 8003e94:	2900      	cmp	r1, #0
 8003e96:	d040      	beq.n	8003f1a <_free_r+0x8a>
 8003e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e9c:	1f0c      	subs	r4, r1, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	18e4      	addlt	r4, r4, r3
 8003ea4:	f000 fec0 	bl	8004c28 <__malloc_lock>
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <_free_r+0x8c>)
 8003eaa:	6813      	ldr	r3, [r2, #0]
 8003eac:	b933      	cbnz	r3, 8003ebc <_free_r+0x2c>
 8003eae:	6063      	str	r3, [r4, #4]
 8003eb0:	6014      	str	r4, [r2, #0]
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eb8:	f000 bebc 	b.w	8004c34 <__malloc_unlock>
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	d908      	bls.n	8003ed2 <_free_r+0x42>
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	1821      	adds	r1, r4, r0
 8003ec4:	428b      	cmp	r3, r1
 8003ec6:	bf01      	itttt	eq
 8003ec8:	6819      	ldreq	r1, [r3, #0]
 8003eca:	685b      	ldreq	r3, [r3, #4]
 8003ecc:	1809      	addeq	r1, r1, r0
 8003ece:	6021      	streq	r1, [r4, #0]
 8003ed0:	e7ed      	b.n	8003eae <_free_r+0x1e>
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b10b      	cbz	r3, 8003edc <_free_r+0x4c>
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d9fa      	bls.n	8003ed2 <_free_r+0x42>
 8003edc:	6811      	ldr	r1, [r2, #0]
 8003ede:	1850      	adds	r0, r2, r1
 8003ee0:	42a0      	cmp	r0, r4
 8003ee2:	d10b      	bne.n	8003efc <_free_r+0x6c>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	1850      	adds	r0, r2, r1
 8003eea:	4283      	cmp	r3, r0
 8003eec:	6011      	str	r1, [r2, #0]
 8003eee:	d1e0      	bne.n	8003eb2 <_free_r+0x22>
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4401      	add	r1, r0
 8003ef6:	6011      	str	r1, [r2, #0]
 8003ef8:	6053      	str	r3, [r2, #4]
 8003efa:	e7da      	b.n	8003eb2 <_free_r+0x22>
 8003efc:	d902      	bls.n	8003f04 <_free_r+0x74>
 8003efe:	230c      	movs	r3, #12
 8003f00:	602b      	str	r3, [r5, #0]
 8003f02:	e7d6      	b.n	8003eb2 <_free_r+0x22>
 8003f04:	6820      	ldr	r0, [r4, #0]
 8003f06:	1821      	adds	r1, r4, r0
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	bf01      	itttt	eq
 8003f0c:	6819      	ldreq	r1, [r3, #0]
 8003f0e:	685b      	ldreq	r3, [r3, #4]
 8003f10:	1809      	addeq	r1, r1, r0
 8003f12:	6021      	streq	r1, [r4, #0]
 8003f14:	6063      	str	r3, [r4, #4]
 8003f16:	6054      	str	r4, [r2, #4]
 8003f18:	e7cb      	b.n	8003eb2 <_free_r+0x22>
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	2000058c 	.word	0x2000058c

08003f20 <sbrk_aligned>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	4e0e      	ldr	r6, [pc, #56]	; (8003f5c <sbrk_aligned+0x3c>)
 8003f24:	460c      	mov	r4, r1
 8003f26:	6831      	ldr	r1, [r6, #0]
 8003f28:	4605      	mov	r5, r0
 8003f2a:	b911      	cbnz	r1, 8003f32 <sbrk_aligned+0x12>
 8003f2c:	f000 fb7a 	bl	8004624 <_sbrk_r>
 8003f30:	6030      	str	r0, [r6, #0]
 8003f32:	4621      	mov	r1, r4
 8003f34:	4628      	mov	r0, r5
 8003f36:	f000 fb75 	bl	8004624 <_sbrk_r>
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	d00a      	beq.n	8003f54 <sbrk_aligned+0x34>
 8003f3e:	1cc4      	adds	r4, r0, #3
 8003f40:	f024 0403 	bic.w	r4, r4, #3
 8003f44:	42a0      	cmp	r0, r4
 8003f46:	d007      	beq.n	8003f58 <sbrk_aligned+0x38>
 8003f48:	1a21      	subs	r1, r4, r0
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f000 fb6a 	bl	8004624 <_sbrk_r>
 8003f50:	3001      	adds	r0, #1
 8003f52:	d101      	bne.n	8003f58 <sbrk_aligned+0x38>
 8003f54:	f04f 34ff 	mov.w	r4, #4294967295
 8003f58:	4620      	mov	r0, r4
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	20000590 	.word	0x20000590

08003f60 <_malloc_r>:
 8003f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f64:	1ccd      	adds	r5, r1, #3
 8003f66:	f025 0503 	bic.w	r5, r5, #3
 8003f6a:	3508      	adds	r5, #8
 8003f6c:	2d0c      	cmp	r5, #12
 8003f6e:	bf38      	it	cc
 8003f70:	250c      	movcc	r5, #12
 8003f72:	2d00      	cmp	r5, #0
 8003f74:	4607      	mov	r7, r0
 8003f76:	db01      	blt.n	8003f7c <_malloc_r+0x1c>
 8003f78:	42a9      	cmp	r1, r5
 8003f7a:	d905      	bls.n	8003f88 <_malloc_r+0x28>
 8003f7c:	230c      	movs	r3, #12
 8003f7e:	2600      	movs	r6, #0
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4630      	mov	r0, r6
 8003f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f88:	4e2e      	ldr	r6, [pc, #184]	; (8004044 <_malloc_r+0xe4>)
 8003f8a:	f000 fe4d 	bl	8004c28 <__malloc_lock>
 8003f8e:	6833      	ldr	r3, [r6, #0]
 8003f90:	461c      	mov	r4, r3
 8003f92:	bb34      	cbnz	r4, 8003fe2 <_malloc_r+0x82>
 8003f94:	4629      	mov	r1, r5
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7ff ffc2 	bl	8003f20 <sbrk_aligned>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	d14d      	bne.n	800403e <_malloc_r+0xde>
 8003fa2:	6834      	ldr	r4, [r6, #0]
 8003fa4:	4626      	mov	r6, r4
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	d140      	bne.n	800402c <_malloc_r+0xcc>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	4631      	mov	r1, r6
 8003fae:	4638      	mov	r0, r7
 8003fb0:	eb04 0803 	add.w	r8, r4, r3
 8003fb4:	f000 fb36 	bl	8004624 <_sbrk_r>
 8003fb8:	4580      	cmp	r8, r0
 8003fba:	d13a      	bne.n	8004032 <_malloc_r+0xd2>
 8003fbc:	6821      	ldr	r1, [r4, #0]
 8003fbe:	3503      	adds	r5, #3
 8003fc0:	1a6d      	subs	r5, r5, r1
 8003fc2:	f025 0503 	bic.w	r5, r5, #3
 8003fc6:	3508      	adds	r5, #8
 8003fc8:	2d0c      	cmp	r5, #12
 8003fca:	bf38      	it	cc
 8003fcc:	250c      	movcc	r5, #12
 8003fce:	4638      	mov	r0, r7
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	f7ff ffa5 	bl	8003f20 <sbrk_aligned>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d02b      	beq.n	8004032 <_malloc_r+0xd2>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	442b      	add	r3, r5
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	e00e      	b.n	8004000 <_malloc_r+0xa0>
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	1b52      	subs	r2, r2, r5
 8003fe6:	d41e      	bmi.n	8004026 <_malloc_r+0xc6>
 8003fe8:	2a0b      	cmp	r2, #11
 8003fea:	d916      	bls.n	800401a <_malloc_r+0xba>
 8003fec:	1961      	adds	r1, r4, r5
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	6025      	str	r5, [r4, #0]
 8003ff2:	bf18      	it	ne
 8003ff4:	6059      	strne	r1, [r3, #4]
 8003ff6:	6863      	ldr	r3, [r4, #4]
 8003ff8:	bf08      	it	eq
 8003ffa:	6031      	streq	r1, [r6, #0]
 8003ffc:	5162      	str	r2, [r4, r5]
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	4638      	mov	r0, r7
 8004002:	f104 060b 	add.w	r6, r4, #11
 8004006:	f000 fe15 	bl	8004c34 <__malloc_unlock>
 800400a:	f026 0607 	bic.w	r6, r6, #7
 800400e:	1d23      	adds	r3, r4, #4
 8004010:	1af2      	subs	r2, r6, r3
 8004012:	d0b6      	beq.n	8003f82 <_malloc_r+0x22>
 8004014:	1b9b      	subs	r3, r3, r6
 8004016:	50a3      	str	r3, [r4, r2]
 8004018:	e7b3      	b.n	8003f82 <_malloc_r+0x22>
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	42a3      	cmp	r3, r4
 800401e:	bf0c      	ite	eq
 8004020:	6032      	streq	r2, [r6, #0]
 8004022:	605a      	strne	r2, [r3, #4]
 8004024:	e7ec      	b.n	8004000 <_malloc_r+0xa0>
 8004026:	4623      	mov	r3, r4
 8004028:	6864      	ldr	r4, [r4, #4]
 800402a:	e7b2      	b.n	8003f92 <_malloc_r+0x32>
 800402c:	4634      	mov	r4, r6
 800402e:	6876      	ldr	r6, [r6, #4]
 8004030:	e7b9      	b.n	8003fa6 <_malloc_r+0x46>
 8004032:	230c      	movs	r3, #12
 8004034:	4638      	mov	r0, r7
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	f000 fdfc 	bl	8004c34 <__malloc_unlock>
 800403c:	e7a1      	b.n	8003f82 <_malloc_r+0x22>
 800403e:	6025      	str	r5, [r4, #0]
 8004040:	e7de      	b.n	8004000 <_malloc_r+0xa0>
 8004042:	bf00      	nop
 8004044:	2000058c 	.word	0x2000058c

08004048 <__sfputc_r>:
 8004048:	6893      	ldr	r3, [r2, #8]
 800404a:	b410      	push	{r4}
 800404c:	3b01      	subs	r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	6093      	str	r3, [r2, #8]
 8004052:	da07      	bge.n	8004064 <__sfputc_r+0x1c>
 8004054:	6994      	ldr	r4, [r2, #24]
 8004056:	42a3      	cmp	r3, r4
 8004058:	db01      	blt.n	800405e <__sfputc_r+0x16>
 800405a:	290a      	cmp	r1, #10
 800405c:	d102      	bne.n	8004064 <__sfputc_r+0x1c>
 800405e:	bc10      	pop	{r4}
 8004060:	f000 baf0 	b.w	8004644 <__swbuf_r>
 8004064:	6813      	ldr	r3, [r2, #0]
 8004066:	1c58      	adds	r0, r3, #1
 8004068:	6010      	str	r0, [r2, #0]
 800406a:	7019      	strb	r1, [r3, #0]
 800406c:	4608      	mov	r0, r1
 800406e:	bc10      	pop	{r4}
 8004070:	4770      	bx	lr

08004072 <__sfputs_r>:
 8004072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004074:	4606      	mov	r6, r0
 8004076:	460f      	mov	r7, r1
 8004078:	4614      	mov	r4, r2
 800407a:	18d5      	adds	r5, r2, r3
 800407c:	42ac      	cmp	r4, r5
 800407e:	d101      	bne.n	8004084 <__sfputs_r+0x12>
 8004080:	2000      	movs	r0, #0
 8004082:	e007      	b.n	8004094 <__sfputs_r+0x22>
 8004084:	463a      	mov	r2, r7
 8004086:	4630      	mov	r0, r6
 8004088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408c:	f7ff ffdc 	bl	8004048 <__sfputc_r>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d1f3      	bne.n	800407c <__sfputs_r+0xa>
 8004094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004098 <_vfiprintf_r>:
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	460d      	mov	r5, r1
 800409e:	4614      	mov	r4, r2
 80040a0:	4698      	mov	r8, r3
 80040a2:	4606      	mov	r6, r0
 80040a4:	b09d      	sub	sp, #116	; 0x74
 80040a6:	b118      	cbz	r0, 80040b0 <_vfiprintf_r+0x18>
 80040a8:	6983      	ldr	r3, [r0, #24]
 80040aa:	b90b      	cbnz	r3, 80040b0 <_vfiprintf_r+0x18>
 80040ac:	f000 fca8 	bl	8004a00 <__sinit>
 80040b0:	4b89      	ldr	r3, [pc, #548]	; (80042d8 <_vfiprintf_r+0x240>)
 80040b2:	429d      	cmp	r5, r3
 80040b4:	d11b      	bne.n	80040ee <_vfiprintf_r+0x56>
 80040b6:	6875      	ldr	r5, [r6, #4]
 80040b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040ba:	07d9      	lsls	r1, r3, #31
 80040bc:	d405      	bmi.n	80040ca <_vfiprintf_r+0x32>
 80040be:	89ab      	ldrh	r3, [r5, #12]
 80040c0:	059a      	lsls	r2, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_vfiprintf_r+0x32>
 80040c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040c6:	f000 fd39 	bl	8004b3c <__retarget_lock_acquire_recursive>
 80040ca:	89ab      	ldrh	r3, [r5, #12]
 80040cc:	071b      	lsls	r3, r3, #28
 80040ce:	d501      	bpl.n	80040d4 <_vfiprintf_r+0x3c>
 80040d0:	692b      	ldr	r3, [r5, #16]
 80040d2:	b9eb      	cbnz	r3, 8004110 <_vfiprintf_r+0x78>
 80040d4:	4629      	mov	r1, r5
 80040d6:	4630      	mov	r0, r6
 80040d8:	f000 fb06 	bl	80046e8 <__swsetup_r>
 80040dc:	b1c0      	cbz	r0, 8004110 <_vfiprintf_r+0x78>
 80040de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040e0:	07dc      	lsls	r4, r3, #31
 80040e2:	d50e      	bpl.n	8004102 <_vfiprintf_r+0x6a>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	b01d      	add	sp, #116	; 0x74
 80040ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ee:	4b7b      	ldr	r3, [pc, #492]	; (80042dc <_vfiprintf_r+0x244>)
 80040f0:	429d      	cmp	r5, r3
 80040f2:	d101      	bne.n	80040f8 <_vfiprintf_r+0x60>
 80040f4:	68b5      	ldr	r5, [r6, #8]
 80040f6:	e7df      	b.n	80040b8 <_vfiprintf_r+0x20>
 80040f8:	4b79      	ldr	r3, [pc, #484]	; (80042e0 <_vfiprintf_r+0x248>)
 80040fa:	429d      	cmp	r5, r3
 80040fc:	bf08      	it	eq
 80040fe:	68f5      	ldreq	r5, [r6, #12]
 8004100:	e7da      	b.n	80040b8 <_vfiprintf_r+0x20>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	0598      	lsls	r0, r3, #22
 8004106:	d4ed      	bmi.n	80040e4 <_vfiprintf_r+0x4c>
 8004108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800410a:	f000 fd18 	bl	8004b3e <__retarget_lock_release_recursive>
 800410e:	e7e9      	b.n	80040e4 <_vfiprintf_r+0x4c>
 8004110:	2300      	movs	r3, #0
 8004112:	9309      	str	r3, [sp, #36]	; 0x24
 8004114:	2320      	movs	r3, #32
 8004116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800411a:	2330      	movs	r3, #48	; 0x30
 800411c:	f04f 0901 	mov.w	r9, #1
 8004120:	f8cd 800c 	str.w	r8, [sp, #12]
 8004124:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80042e4 <_vfiprintf_r+0x24c>
 8004128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800412c:	4623      	mov	r3, r4
 800412e:	469a      	mov	sl, r3
 8004130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004134:	b10a      	cbz	r2, 800413a <_vfiprintf_r+0xa2>
 8004136:	2a25      	cmp	r2, #37	; 0x25
 8004138:	d1f9      	bne.n	800412e <_vfiprintf_r+0x96>
 800413a:	ebba 0b04 	subs.w	fp, sl, r4
 800413e:	d00b      	beq.n	8004158 <_vfiprintf_r+0xc0>
 8004140:	465b      	mov	r3, fp
 8004142:	4622      	mov	r2, r4
 8004144:	4629      	mov	r1, r5
 8004146:	4630      	mov	r0, r6
 8004148:	f7ff ff93 	bl	8004072 <__sfputs_r>
 800414c:	3001      	adds	r0, #1
 800414e:	f000 80aa 	beq.w	80042a6 <_vfiprintf_r+0x20e>
 8004152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004154:	445a      	add	r2, fp
 8004156:	9209      	str	r2, [sp, #36]	; 0x24
 8004158:	f89a 3000 	ldrb.w	r3, [sl]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a2 	beq.w	80042a6 <_vfiprintf_r+0x20e>
 8004162:	2300      	movs	r3, #0
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800416c:	f10a 0a01 	add.w	sl, sl, #1
 8004170:	9304      	str	r3, [sp, #16]
 8004172:	9307      	str	r3, [sp, #28]
 8004174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004178:	931a      	str	r3, [sp, #104]	; 0x68
 800417a:	4654      	mov	r4, sl
 800417c:	2205      	movs	r2, #5
 800417e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004182:	4858      	ldr	r0, [pc, #352]	; (80042e4 <_vfiprintf_r+0x24c>)
 8004184:	f000 fd42 	bl	8004c0c <memchr>
 8004188:	9a04      	ldr	r2, [sp, #16]
 800418a:	b9d8      	cbnz	r0, 80041c4 <_vfiprintf_r+0x12c>
 800418c:	06d1      	lsls	r1, r2, #27
 800418e:	bf44      	itt	mi
 8004190:	2320      	movmi	r3, #32
 8004192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004196:	0713      	lsls	r3, r2, #28
 8004198:	bf44      	itt	mi
 800419a:	232b      	movmi	r3, #43	; 0x2b
 800419c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a0:	f89a 3000 	ldrb.w	r3, [sl]
 80041a4:	2b2a      	cmp	r3, #42	; 0x2a
 80041a6:	d015      	beq.n	80041d4 <_vfiprintf_r+0x13c>
 80041a8:	4654      	mov	r4, sl
 80041aa:	2000      	movs	r0, #0
 80041ac:	f04f 0c0a 	mov.w	ip, #10
 80041b0:	9a07      	ldr	r2, [sp, #28]
 80041b2:	4621      	mov	r1, r4
 80041b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041b8:	3b30      	subs	r3, #48	; 0x30
 80041ba:	2b09      	cmp	r3, #9
 80041bc:	d94e      	bls.n	800425c <_vfiprintf_r+0x1c4>
 80041be:	b1b0      	cbz	r0, 80041ee <_vfiprintf_r+0x156>
 80041c0:	9207      	str	r2, [sp, #28]
 80041c2:	e014      	b.n	80041ee <_vfiprintf_r+0x156>
 80041c4:	eba0 0308 	sub.w	r3, r0, r8
 80041c8:	fa09 f303 	lsl.w	r3, r9, r3
 80041cc:	4313      	orrs	r3, r2
 80041ce:	46a2      	mov	sl, r4
 80041d0:	9304      	str	r3, [sp, #16]
 80041d2:	e7d2      	b.n	800417a <_vfiprintf_r+0xe2>
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	1d19      	adds	r1, r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	9103      	str	r1, [sp, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bfbb      	ittet	lt
 80041e0:	425b      	neglt	r3, r3
 80041e2:	f042 0202 	orrlt.w	r2, r2, #2
 80041e6:	9307      	strge	r3, [sp, #28]
 80041e8:	9307      	strlt	r3, [sp, #28]
 80041ea:	bfb8      	it	lt
 80041ec:	9204      	strlt	r2, [sp, #16]
 80041ee:	7823      	ldrb	r3, [r4, #0]
 80041f0:	2b2e      	cmp	r3, #46	; 0x2e
 80041f2:	d10c      	bne.n	800420e <_vfiprintf_r+0x176>
 80041f4:	7863      	ldrb	r3, [r4, #1]
 80041f6:	2b2a      	cmp	r3, #42	; 0x2a
 80041f8:	d135      	bne.n	8004266 <_vfiprintf_r+0x1ce>
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	3402      	adds	r4, #2
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	9203      	str	r2, [sp, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	bfb8      	it	lt
 8004208:	f04f 33ff 	movlt.w	r3, #4294967295
 800420c:	9305      	str	r3, [sp, #20]
 800420e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80042e8 <_vfiprintf_r+0x250>
 8004212:	2203      	movs	r2, #3
 8004214:	4650      	mov	r0, sl
 8004216:	7821      	ldrb	r1, [r4, #0]
 8004218:	f000 fcf8 	bl	8004c0c <memchr>
 800421c:	b140      	cbz	r0, 8004230 <_vfiprintf_r+0x198>
 800421e:	2340      	movs	r3, #64	; 0x40
 8004220:	eba0 000a 	sub.w	r0, r0, sl
 8004224:	fa03 f000 	lsl.w	r0, r3, r0
 8004228:	9b04      	ldr	r3, [sp, #16]
 800422a:	3401      	adds	r4, #1
 800422c:	4303      	orrs	r3, r0
 800422e:	9304      	str	r3, [sp, #16]
 8004230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004234:	2206      	movs	r2, #6
 8004236:	482d      	ldr	r0, [pc, #180]	; (80042ec <_vfiprintf_r+0x254>)
 8004238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800423c:	f000 fce6 	bl	8004c0c <memchr>
 8004240:	2800      	cmp	r0, #0
 8004242:	d03f      	beq.n	80042c4 <_vfiprintf_r+0x22c>
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <_vfiprintf_r+0x258>)
 8004246:	bb1b      	cbnz	r3, 8004290 <_vfiprintf_r+0x1f8>
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	3307      	adds	r3, #7
 800424c:	f023 0307 	bic.w	r3, r3, #7
 8004250:	3308      	adds	r3, #8
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004256:	443b      	add	r3, r7
 8004258:	9309      	str	r3, [sp, #36]	; 0x24
 800425a:	e767      	b.n	800412c <_vfiprintf_r+0x94>
 800425c:	460c      	mov	r4, r1
 800425e:	2001      	movs	r0, #1
 8004260:	fb0c 3202 	mla	r2, ip, r2, r3
 8004264:	e7a5      	b.n	80041b2 <_vfiprintf_r+0x11a>
 8004266:	2300      	movs	r3, #0
 8004268:	f04f 0c0a 	mov.w	ip, #10
 800426c:	4619      	mov	r1, r3
 800426e:	3401      	adds	r4, #1
 8004270:	9305      	str	r3, [sp, #20]
 8004272:	4620      	mov	r0, r4
 8004274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004278:	3a30      	subs	r2, #48	; 0x30
 800427a:	2a09      	cmp	r2, #9
 800427c:	d903      	bls.n	8004286 <_vfiprintf_r+0x1ee>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0c5      	beq.n	800420e <_vfiprintf_r+0x176>
 8004282:	9105      	str	r1, [sp, #20]
 8004284:	e7c3      	b.n	800420e <_vfiprintf_r+0x176>
 8004286:	4604      	mov	r4, r0
 8004288:	2301      	movs	r3, #1
 800428a:	fb0c 2101 	mla	r1, ip, r1, r2
 800428e:	e7f0      	b.n	8004272 <_vfiprintf_r+0x1da>
 8004290:	ab03      	add	r3, sp, #12
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	462a      	mov	r2, r5
 8004296:	4630      	mov	r0, r6
 8004298:	4b16      	ldr	r3, [pc, #88]	; (80042f4 <_vfiprintf_r+0x25c>)
 800429a:	a904      	add	r1, sp, #16
 800429c:	f3af 8000 	nop.w
 80042a0:	4607      	mov	r7, r0
 80042a2:	1c78      	adds	r0, r7, #1
 80042a4:	d1d6      	bne.n	8004254 <_vfiprintf_r+0x1bc>
 80042a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042a8:	07d9      	lsls	r1, r3, #31
 80042aa:	d405      	bmi.n	80042b8 <_vfiprintf_r+0x220>
 80042ac:	89ab      	ldrh	r3, [r5, #12]
 80042ae:	059a      	lsls	r2, r3, #22
 80042b0:	d402      	bmi.n	80042b8 <_vfiprintf_r+0x220>
 80042b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042b4:	f000 fc43 	bl	8004b3e <__retarget_lock_release_recursive>
 80042b8:	89ab      	ldrh	r3, [r5, #12]
 80042ba:	065b      	lsls	r3, r3, #25
 80042bc:	f53f af12 	bmi.w	80040e4 <_vfiprintf_r+0x4c>
 80042c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042c2:	e711      	b.n	80040e8 <_vfiprintf_r+0x50>
 80042c4:	ab03      	add	r3, sp, #12
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	462a      	mov	r2, r5
 80042ca:	4630      	mov	r0, r6
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <_vfiprintf_r+0x25c>)
 80042ce:	a904      	add	r1, sp, #16
 80042d0:	f000 f882 	bl	80043d8 <_printf_i>
 80042d4:	e7e4      	b.n	80042a0 <_vfiprintf_r+0x208>
 80042d6:	bf00      	nop
 80042d8:	08008a50 	.word	0x08008a50
 80042dc:	08008a70 	.word	0x08008a70
 80042e0:	08008a30 	.word	0x08008a30
 80042e4:	080089fa 	.word	0x080089fa
 80042e8:	08008a00 	.word	0x08008a00
 80042ec:	08008a04 	.word	0x08008a04
 80042f0:	00000000 	.word	0x00000000
 80042f4:	08004073 	.word	0x08004073

080042f8 <_printf_common>:
 80042f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	4616      	mov	r6, r2
 80042fe:	4699      	mov	r9, r3
 8004300:	688a      	ldr	r2, [r1, #8]
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	4607      	mov	r7, r0
 8004306:	4293      	cmp	r3, r2
 8004308:	bfb8      	it	lt
 800430a:	4613      	movlt	r3, r2
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004312:	460c      	mov	r4, r1
 8004314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004318:	b10a      	cbz	r2, 800431e <_printf_common+0x26>
 800431a:	3301      	adds	r3, #1
 800431c:	6033      	str	r3, [r6, #0]
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	0699      	lsls	r1, r3, #26
 8004322:	bf42      	ittt	mi
 8004324:	6833      	ldrmi	r3, [r6, #0]
 8004326:	3302      	addmi	r3, #2
 8004328:	6033      	strmi	r3, [r6, #0]
 800432a:	6825      	ldr	r5, [r4, #0]
 800432c:	f015 0506 	ands.w	r5, r5, #6
 8004330:	d106      	bne.n	8004340 <_printf_common+0x48>
 8004332:	f104 0a19 	add.w	sl, r4, #25
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	6832      	ldr	r2, [r6, #0]
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	42ab      	cmp	r3, r5
 800433e:	dc28      	bgt.n	8004392 <_printf_common+0x9a>
 8004340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004344:	1e13      	subs	r3, r2, #0
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	bf18      	it	ne
 800434a:	2301      	movne	r3, #1
 800434c:	0692      	lsls	r2, r2, #26
 800434e:	d42d      	bmi.n	80043ac <_printf_common+0xb4>
 8004350:	4649      	mov	r1, r9
 8004352:	4638      	mov	r0, r7
 8004354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004358:	47c0      	blx	r8
 800435a:	3001      	adds	r0, #1
 800435c:	d020      	beq.n	80043a0 <_printf_common+0xa8>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	68e5      	ldr	r5, [r4, #12]
 8004362:	f003 0306 	and.w	r3, r3, #6
 8004366:	2b04      	cmp	r3, #4
 8004368:	bf18      	it	ne
 800436a:	2500      	movne	r5, #0
 800436c:	6832      	ldr	r2, [r6, #0]
 800436e:	f04f 0600 	mov.w	r6, #0
 8004372:	68a3      	ldr	r3, [r4, #8]
 8004374:	bf08      	it	eq
 8004376:	1aad      	subeq	r5, r5, r2
 8004378:	6922      	ldr	r2, [r4, #16]
 800437a:	bf08      	it	eq
 800437c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004380:	4293      	cmp	r3, r2
 8004382:	bfc4      	itt	gt
 8004384:	1a9b      	subgt	r3, r3, r2
 8004386:	18ed      	addgt	r5, r5, r3
 8004388:	341a      	adds	r4, #26
 800438a:	42b5      	cmp	r5, r6
 800438c:	d11a      	bne.n	80043c4 <_printf_common+0xcc>
 800438e:	2000      	movs	r0, #0
 8004390:	e008      	b.n	80043a4 <_printf_common+0xac>
 8004392:	2301      	movs	r3, #1
 8004394:	4652      	mov	r2, sl
 8004396:	4649      	mov	r1, r9
 8004398:	4638      	mov	r0, r7
 800439a:	47c0      	blx	r8
 800439c:	3001      	adds	r0, #1
 800439e:	d103      	bne.n	80043a8 <_printf_common+0xb0>
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a8:	3501      	adds	r5, #1
 80043aa:	e7c4      	b.n	8004336 <_printf_common+0x3e>
 80043ac:	2030      	movs	r0, #48	; 0x30
 80043ae:	18e1      	adds	r1, r4, r3
 80043b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ba:	4422      	add	r2, r4
 80043bc:	3302      	adds	r3, #2
 80043be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c2:	e7c5      	b.n	8004350 <_printf_common+0x58>
 80043c4:	2301      	movs	r3, #1
 80043c6:	4622      	mov	r2, r4
 80043c8:	4649      	mov	r1, r9
 80043ca:	4638      	mov	r0, r7
 80043cc:	47c0      	blx	r8
 80043ce:	3001      	adds	r0, #1
 80043d0:	d0e6      	beq.n	80043a0 <_printf_common+0xa8>
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7d9      	b.n	800438a <_printf_common+0x92>
	...

080043d8 <_printf_i>:
 80043d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	7e0f      	ldrb	r7, [r1, #24]
 80043de:	4691      	mov	r9, r2
 80043e0:	2f78      	cmp	r7, #120	; 0x78
 80043e2:	4680      	mov	r8, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	469a      	mov	sl, r3
 80043e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ee:	d807      	bhi.n	8004400 <_printf_i+0x28>
 80043f0:	2f62      	cmp	r7, #98	; 0x62
 80043f2:	d80a      	bhi.n	800440a <_printf_i+0x32>
 80043f4:	2f00      	cmp	r7, #0
 80043f6:	f000 80d9 	beq.w	80045ac <_printf_i+0x1d4>
 80043fa:	2f58      	cmp	r7, #88	; 0x58
 80043fc:	f000 80a4 	beq.w	8004548 <_printf_i+0x170>
 8004400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004408:	e03a      	b.n	8004480 <_printf_i+0xa8>
 800440a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800440e:	2b15      	cmp	r3, #21
 8004410:	d8f6      	bhi.n	8004400 <_printf_i+0x28>
 8004412:	a101      	add	r1, pc, #4	; (adr r1, 8004418 <_printf_i+0x40>)
 8004414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004418:	08004471 	.word	0x08004471
 800441c:	08004485 	.word	0x08004485
 8004420:	08004401 	.word	0x08004401
 8004424:	08004401 	.word	0x08004401
 8004428:	08004401 	.word	0x08004401
 800442c:	08004401 	.word	0x08004401
 8004430:	08004485 	.word	0x08004485
 8004434:	08004401 	.word	0x08004401
 8004438:	08004401 	.word	0x08004401
 800443c:	08004401 	.word	0x08004401
 8004440:	08004401 	.word	0x08004401
 8004444:	08004593 	.word	0x08004593
 8004448:	080044b5 	.word	0x080044b5
 800444c:	08004575 	.word	0x08004575
 8004450:	08004401 	.word	0x08004401
 8004454:	08004401 	.word	0x08004401
 8004458:	080045b5 	.word	0x080045b5
 800445c:	08004401 	.word	0x08004401
 8004460:	080044b5 	.word	0x080044b5
 8004464:	08004401 	.word	0x08004401
 8004468:	08004401 	.word	0x08004401
 800446c:	0800457d 	.word	0x0800457d
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	602a      	str	r2, [r5, #0]
 8004478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800447c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004480:	2301      	movs	r3, #1
 8004482:	e0a4      	b.n	80045ce <_printf_i+0x1f6>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	6829      	ldr	r1, [r5, #0]
 8004488:	0606      	lsls	r6, r0, #24
 800448a:	f101 0304 	add.w	r3, r1, #4
 800448e:	d50a      	bpl.n	80044a6 <_printf_i+0xce>
 8004490:	680e      	ldr	r6, [r1, #0]
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	2e00      	cmp	r6, #0
 8004496:	da03      	bge.n	80044a0 <_printf_i+0xc8>
 8004498:	232d      	movs	r3, #45	; 0x2d
 800449a:	4276      	negs	r6, r6
 800449c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a0:	230a      	movs	r3, #10
 80044a2:	485e      	ldr	r0, [pc, #376]	; (800461c <_printf_i+0x244>)
 80044a4:	e019      	b.n	80044da <_printf_i+0x102>
 80044a6:	680e      	ldr	r6, [r1, #0]
 80044a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	bf18      	it	ne
 80044b0:	b236      	sxthne	r6, r6
 80044b2:	e7ef      	b.n	8004494 <_printf_i+0xbc>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	6820      	ldr	r0, [r4, #0]
 80044b8:	1d19      	adds	r1, r3, #4
 80044ba:	6029      	str	r1, [r5, #0]
 80044bc:	0601      	lsls	r1, r0, #24
 80044be:	d501      	bpl.n	80044c4 <_printf_i+0xec>
 80044c0:	681e      	ldr	r6, [r3, #0]
 80044c2:	e002      	b.n	80044ca <_printf_i+0xf2>
 80044c4:	0646      	lsls	r6, r0, #25
 80044c6:	d5fb      	bpl.n	80044c0 <_printf_i+0xe8>
 80044c8:	881e      	ldrh	r6, [r3, #0]
 80044ca:	2f6f      	cmp	r7, #111	; 0x6f
 80044cc:	bf0c      	ite	eq
 80044ce:	2308      	moveq	r3, #8
 80044d0:	230a      	movne	r3, #10
 80044d2:	4852      	ldr	r0, [pc, #328]	; (800461c <_printf_i+0x244>)
 80044d4:	2100      	movs	r1, #0
 80044d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044da:	6865      	ldr	r5, [r4, #4]
 80044dc:	2d00      	cmp	r5, #0
 80044de:	bfa8      	it	ge
 80044e0:	6821      	ldrge	r1, [r4, #0]
 80044e2:	60a5      	str	r5, [r4, #8]
 80044e4:	bfa4      	itt	ge
 80044e6:	f021 0104 	bicge.w	r1, r1, #4
 80044ea:	6021      	strge	r1, [r4, #0]
 80044ec:	b90e      	cbnz	r6, 80044f2 <_printf_i+0x11a>
 80044ee:	2d00      	cmp	r5, #0
 80044f0:	d04d      	beq.n	800458e <_printf_i+0x1b6>
 80044f2:	4615      	mov	r5, r2
 80044f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80044f8:	fb03 6711 	mls	r7, r3, r1, r6
 80044fc:	5dc7      	ldrb	r7, [r0, r7]
 80044fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004502:	4637      	mov	r7, r6
 8004504:	42bb      	cmp	r3, r7
 8004506:	460e      	mov	r6, r1
 8004508:	d9f4      	bls.n	80044f4 <_printf_i+0x11c>
 800450a:	2b08      	cmp	r3, #8
 800450c:	d10b      	bne.n	8004526 <_printf_i+0x14e>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	07de      	lsls	r6, r3, #31
 8004512:	d508      	bpl.n	8004526 <_printf_i+0x14e>
 8004514:	6923      	ldr	r3, [r4, #16]
 8004516:	6861      	ldr	r1, [r4, #4]
 8004518:	4299      	cmp	r1, r3
 800451a:	bfde      	ittt	le
 800451c:	2330      	movle	r3, #48	; 0x30
 800451e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004526:	1b52      	subs	r2, r2, r5
 8004528:	6122      	str	r2, [r4, #16]
 800452a:	464b      	mov	r3, r9
 800452c:	4621      	mov	r1, r4
 800452e:	4640      	mov	r0, r8
 8004530:	f8cd a000 	str.w	sl, [sp]
 8004534:	aa03      	add	r2, sp, #12
 8004536:	f7ff fedf 	bl	80042f8 <_printf_common>
 800453a:	3001      	adds	r0, #1
 800453c:	d14c      	bne.n	80045d8 <_printf_i+0x200>
 800453e:	f04f 30ff 	mov.w	r0, #4294967295
 8004542:	b004      	add	sp, #16
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	4834      	ldr	r0, [pc, #208]	; (800461c <_printf_i+0x244>)
 800454a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800454e:	6829      	ldr	r1, [r5, #0]
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f851 6b04 	ldr.w	r6, [r1], #4
 8004556:	6029      	str	r1, [r5, #0]
 8004558:	061d      	lsls	r5, r3, #24
 800455a:	d514      	bpl.n	8004586 <_printf_i+0x1ae>
 800455c:	07df      	lsls	r7, r3, #31
 800455e:	bf44      	itt	mi
 8004560:	f043 0320 	orrmi.w	r3, r3, #32
 8004564:	6023      	strmi	r3, [r4, #0]
 8004566:	b91e      	cbnz	r6, 8004570 <_printf_i+0x198>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	f023 0320 	bic.w	r3, r3, #32
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	2310      	movs	r3, #16
 8004572:	e7af      	b.n	80044d4 <_printf_i+0xfc>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	2378      	movs	r3, #120	; 0x78
 800457e:	4828      	ldr	r0, [pc, #160]	; (8004620 <_printf_i+0x248>)
 8004580:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004584:	e7e3      	b.n	800454e <_printf_i+0x176>
 8004586:	0659      	lsls	r1, r3, #25
 8004588:	bf48      	it	mi
 800458a:	b2b6      	uxthmi	r6, r6
 800458c:	e7e6      	b.n	800455c <_printf_i+0x184>
 800458e:	4615      	mov	r5, r2
 8004590:	e7bb      	b.n	800450a <_printf_i+0x132>
 8004592:	682b      	ldr	r3, [r5, #0]
 8004594:	6826      	ldr	r6, [r4, #0]
 8004596:	1d18      	adds	r0, r3, #4
 8004598:	6961      	ldr	r1, [r4, #20]
 800459a:	6028      	str	r0, [r5, #0]
 800459c:	0635      	lsls	r5, r6, #24
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	d501      	bpl.n	80045a6 <_printf_i+0x1ce>
 80045a2:	6019      	str	r1, [r3, #0]
 80045a4:	e002      	b.n	80045ac <_printf_i+0x1d4>
 80045a6:	0670      	lsls	r0, r6, #25
 80045a8:	d5fb      	bpl.n	80045a2 <_printf_i+0x1ca>
 80045aa:	8019      	strh	r1, [r3, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	4615      	mov	r5, r2
 80045b0:	6123      	str	r3, [r4, #16]
 80045b2:	e7ba      	b.n	800452a <_printf_i+0x152>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	2100      	movs	r1, #0
 80045b8:	1d1a      	adds	r2, r3, #4
 80045ba:	602a      	str	r2, [r5, #0]
 80045bc:	681d      	ldr	r5, [r3, #0]
 80045be:	6862      	ldr	r2, [r4, #4]
 80045c0:	4628      	mov	r0, r5
 80045c2:	f000 fb23 	bl	8004c0c <memchr>
 80045c6:	b108      	cbz	r0, 80045cc <_printf_i+0x1f4>
 80045c8:	1b40      	subs	r0, r0, r5
 80045ca:	6060      	str	r0, [r4, #4]
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	2300      	movs	r3, #0
 80045d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d6:	e7a8      	b.n	800452a <_printf_i+0x152>
 80045d8:	462a      	mov	r2, r5
 80045da:	4649      	mov	r1, r9
 80045dc:	4640      	mov	r0, r8
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	47d0      	blx	sl
 80045e2:	3001      	adds	r0, #1
 80045e4:	d0ab      	beq.n	800453e <_printf_i+0x166>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	079b      	lsls	r3, r3, #30
 80045ea:	d413      	bmi.n	8004614 <_printf_i+0x23c>
 80045ec:	68e0      	ldr	r0, [r4, #12]
 80045ee:	9b03      	ldr	r3, [sp, #12]
 80045f0:	4298      	cmp	r0, r3
 80045f2:	bfb8      	it	lt
 80045f4:	4618      	movlt	r0, r3
 80045f6:	e7a4      	b.n	8004542 <_printf_i+0x16a>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4632      	mov	r2, r6
 80045fc:	4649      	mov	r1, r9
 80045fe:	4640      	mov	r0, r8
 8004600:	47d0      	blx	sl
 8004602:	3001      	adds	r0, #1
 8004604:	d09b      	beq.n	800453e <_printf_i+0x166>
 8004606:	3501      	adds	r5, #1
 8004608:	68e3      	ldr	r3, [r4, #12]
 800460a:	9903      	ldr	r1, [sp, #12]
 800460c:	1a5b      	subs	r3, r3, r1
 800460e:	42ab      	cmp	r3, r5
 8004610:	dcf2      	bgt.n	80045f8 <_printf_i+0x220>
 8004612:	e7eb      	b.n	80045ec <_printf_i+0x214>
 8004614:	2500      	movs	r5, #0
 8004616:	f104 0619 	add.w	r6, r4, #25
 800461a:	e7f5      	b.n	8004608 <_printf_i+0x230>
 800461c:	08008a0b 	.word	0x08008a0b
 8004620:	08008a1c 	.word	0x08008a1c

08004624 <_sbrk_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	2300      	movs	r3, #0
 8004628:	4d05      	ldr	r5, [pc, #20]	; (8004640 <_sbrk_r+0x1c>)
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	f7fd f8e8 	bl	8001804 <_sbrk>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_sbrk_r+0x1a>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	b103      	cbz	r3, 800463e <_sbrk_r+0x1a>
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	20000598 	.word	0x20000598

08004644 <__swbuf_r>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	460e      	mov	r6, r1
 8004648:	4614      	mov	r4, r2
 800464a:	4605      	mov	r5, r0
 800464c:	b118      	cbz	r0, 8004656 <__swbuf_r+0x12>
 800464e:	6983      	ldr	r3, [r0, #24]
 8004650:	b90b      	cbnz	r3, 8004656 <__swbuf_r+0x12>
 8004652:	f000 f9d5 	bl	8004a00 <__sinit>
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <__swbuf_r+0x98>)
 8004658:	429c      	cmp	r4, r3
 800465a:	d12b      	bne.n	80046b4 <__swbuf_r+0x70>
 800465c:	686c      	ldr	r4, [r5, #4]
 800465e:	69a3      	ldr	r3, [r4, #24]
 8004660:	60a3      	str	r3, [r4, #8]
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	071a      	lsls	r2, r3, #28
 8004666:	d52f      	bpl.n	80046c8 <__swbuf_r+0x84>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	b36b      	cbz	r3, 80046c8 <__swbuf_r+0x84>
 800466c:	6923      	ldr	r3, [r4, #16]
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	b2f6      	uxtb	r6, r6
 8004672:	1ac0      	subs	r0, r0, r3
 8004674:	6963      	ldr	r3, [r4, #20]
 8004676:	4637      	mov	r7, r6
 8004678:	4283      	cmp	r3, r0
 800467a:	dc04      	bgt.n	8004686 <__swbuf_r+0x42>
 800467c:	4621      	mov	r1, r4
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f92a 	bl	80048d8 <_fflush_r>
 8004684:	bb30      	cbnz	r0, 80046d4 <__swbuf_r+0x90>
 8004686:	68a3      	ldr	r3, [r4, #8]
 8004688:	3001      	adds	r0, #1
 800468a:	3b01      	subs	r3, #1
 800468c:	60a3      	str	r3, [r4, #8]
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	6022      	str	r2, [r4, #0]
 8004694:	701e      	strb	r6, [r3, #0]
 8004696:	6963      	ldr	r3, [r4, #20]
 8004698:	4283      	cmp	r3, r0
 800469a:	d004      	beq.n	80046a6 <__swbuf_r+0x62>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	07db      	lsls	r3, r3, #31
 80046a0:	d506      	bpl.n	80046b0 <__swbuf_r+0x6c>
 80046a2:	2e0a      	cmp	r6, #10
 80046a4:	d104      	bne.n	80046b0 <__swbuf_r+0x6c>
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f915 	bl	80048d8 <_fflush_r>
 80046ae:	b988      	cbnz	r0, 80046d4 <__swbuf_r+0x90>
 80046b0:	4638      	mov	r0, r7
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <__swbuf_r+0x9c>)
 80046b6:	429c      	cmp	r4, r3
 80046b8:	d101      	bne.n	80046be <__swbuf_r+0x7a>
 80046ba:	68ac      	ldr	r4, [r5, #8]
 80046bc:	e7cf      	b.n	800465e <__swbuf_r+0x1a>
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <__swbuf_r+0xa0>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	bf08      	it	eq
 80046c4:	68ec      	ldreq	r4, [r5, #12]
 80046c6:	e7ca      	b.n	800465e <__swbuf_r+0x1a>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 f80c 	bl	80046e8 <__swsetup_r>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d0cb      	beq.n	800466c <__swbuf_r+0x28>
 80046d4:	f04f 37ff 	mov.w	r7, #4294967295
 80046d8:	e7ea      	b.n	80046b0 <__swbuf_r+0x6c>
 80046da:	bf00      	nop
 80046dc:	08008a50 	.word	0x08008a50
 80046e0:	08008a70 	.word	0x08008a70
 80046e4:	08008a30 	.word	0x08008a30

080046e8 <__swsetup_r>:
 80046e8:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <__swsetup_r+0xcc>)
 80046ea:	b570      	push	{r4, r5, r6, lr}
 80046ec:	681d      	ldr	r5, [r3, #0]
 80046ee:	4606      	mov	r6, r0
 80046f0:	460c      	mov	r4, r1
 80046f2:	b125      	cbz	r5, 80046fe <__swsetup_r+0x16>
 80046f4:	69ab      	ldr	r3, [r5, #24]
 80046f6:	b913      	cbnz	r3, 80046fe <__swsetup_r+0x16>
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 f981 	bl	8004a00 <__sinit>
 80046fe:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <__swsetup_r+0xd0>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d10f      	bne.n	8004724 <__swsetup_r+0x3c>
 8004704:	686c      	ldr	r4, [r5, #4]
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800470c:	0719      	lsls	r1, r3, #28
 800470e:	d42c      	bmi.n	800476a <__swsetup_r+0x82>
 8004710:	06dd      	lsls	r5, r3, #27
 8004712:	d411      	bmi.n	8004738 <__swsetup_r+0x50>
 8004714:	2309      	movs	r3, #9
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	81a3      	strh	r3, [r4, #12]
 8004722:	e03e      	b.n	80047a2 <__swsetup_r+0xba>
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <__swsetup_r+0xd4>)
 8004726:	429c      	cmp	r4, r3
 8004728:	d101      	bne.n	800472e <__swsetup_r+0x46>
 800472a:	68ac      	ldr	r4, [r5, #8]
 800472c:	e7eb      	b.n	8004706 <__swsetup_r+0x1e>
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <__swsetup_r+0xd8>)
 8004730:	429c      	cmp	r4, r3
 8004732:	bf08      	it	eq
 8004734:	68ec      	ldreq	r4, [r5, #12]
 8004736:	e7e6      	b.n	8004706 <__swsetup_r+0x1e>
 8004738:	0758      	lsls	r0, r3, #29
 800473a:	d512      	bpl.n	8004762 <__swsetup_r+0x7a>
 800473c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473e:	b141      	cbz	r1, 8004752 <__swsetup_r+0x6a>
 8004740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004744:	4299      	cmp	r1, r3
 8004746:	d002      	beq.n	800474e <__swsetup_r+0x66>
 8004748:	4630      	mov	r0, r6
 800474a:	f7ff fba1 	bl	8003e90 <_free_r>
 800474e:	2300      	movs	r3, #0
 8004750:	6363      	str	r3, [r4, #52]	; 0x34
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	2300      	movs	r3, #0
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	f043 0308 	orr.w	r3, r3, #8
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	b94b      	cbnz	r3, 8004782 <__swsetup_r+0x9a>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d003      	beq.n	8004782 <__swsetup_r+0x9a>
 800477a:	4621      	mov	r1, r4
 800477c:	4630      	mov	r0, r6
 800477e:	f000 fa05 	bl	8004b8c <__smakebuf_r>
 8004782:	89a0      	ldrh	r0, [r4, #12]
 8004784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004788:	f010 0301 	ands.w	r3, r0, #1
 800478c:	d00a      	beq.n	80047a4 <__swsetup_r+0xbc>
 800478e:	2300      	movs	r3, #0
 8004790:	60a3      	str	r3, [r4, #8]
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	425b      	negs	r3, r3
 8004796:	61a3      	str	r3, [r4, #24]
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	b943      	cbnz	r3, 80047ae <__swsetup_r+0xc6>
 800479c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047a0:	d1ba      	bne.n	8004718 <__swsetup_r+0x30>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	0781      	lsls	r1, r0, #30
 80047a6:	bf58      	it	pl
 80047a8:	6963      	ldrpl	r3, [r4, #20]
 80047aa:	60a3      	str	r3, [r4, #8]
 80047ac:	e7f4      	b.n	8004798 <__swsetup_r+0xb0>
 80047ae:	2000      	movs	r0, #0
 80047b0:	e7f7      	b.n	80047a2 <__swsetup_r+0xba>
 80047b2:	bf00      	nop
 80047b4:	2000001c 	.word	0x2000001c
 80047b8:	08008a50 	.word	0x08008a50
 80047bc:	08008a70 	.word	0x08008a70
 80047c0:	08008a30 	.word	0x08008a30

080047c4 <abort>:
 80047c4:	2006      	movs	r0, #6
 80047c6:	b508      	push	{r3, lr}
 80047c8:	f000 fa62 	bl	8004c90 <raise>
 80047cc:	2001      	movs	r0, #1
 80047ce:	f7fc ffa6 	bl	800171e <_exit>
	...

080047d4 <__sflush_r>:
 80047d4:	898a      	ldrh	r2, [r1, #12]
 80047d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d8:	4605      	mov	r5, r0
 80047da:	0710      	lsls	r0, r2, #28
 80047dc:	460c      	mov	r4, r1
 80047de:	d457      	bmi.n	8004890 <__sflush_r+0xbc>
 80047e0:	684b      	ldr	r3, [r1, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dc04      	bgt.n	80047f0 <__sflush_r+0x1c>
 80047e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dc01      	bgt.n	80047f0 <__sflush_r+0x1c>
 80047ec:	2000      	movs	r0, #0
 80047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	d0fa      	beq.n	80047ec <__sflush_r+0x18>
 80047f6:	2300      	movs	r3, #0
 80047f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047fc:	682f      	ldr	r7, [r5, #0]
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	d032      	beq.n	8004868 <__sflush_r+0x94>
 8004802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	075a      	lsls	r2, r3, #29
 8004808:	d505      	bpl.n	8004816 <__sflush_r+0x42>
 800480a:	6863      	ldr	r3, [r4, #4]
 800480c:	1ac0      	subs	r0, r0, r3
 800480e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004810:	b10b      	cbz	r3, 8004816 <__sflush_r+0x42>
 8004812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004814:	1ac0      	subs	r0, r0, r3
 8004816:	2300      	movs	r3, #0
 8004818:	4602      	mov	r2, r0
 800481a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481c:	4628      	mov	r0, r5
 800481e:	6a21      	ldr	r1, [r4, #32]
 8004820:	47b0      	blx	r6
 8004822:	1c43      	adds	r3, r0, #1
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	d106      	bne.n	8004836 <__sflush_r+0x62>
 8004828:	6829      	ldr	r1, [r5, #0]
 800482a:	291d      	cmp	r1, #29
 800482c:	d82c      	bhi.n	8004888 <__sflush_r+0xb4>
 800482e:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <__sflush_r+0x100>)
 8004830:	40ca      	lsrs	r2, r1
 8004832:	07d6      	lsls	r6, r2, #31
 8004834:	d528      	bpl.n	8004888 <__sflush_r+0xb4>
 8004836:	2200      	movs	r2, #0
 8004838:	6062      	str	r2, [r4, #4]
 800483a:	6922      	ldr	r2, [r4, #16]
 800483c:	04d9      	lsls	r1, r3, #19
 800483e:	6022      	str	r2, [r4, #0]
 8004840:	d504      	bpl.n	800484c <__sflush_r+0x78>
 8004842:	1c42      	adds	r2, r0, #1
 8004844:	d101      	bne.n	800484a <__sflush_r+0x76>
 8004846:	682b      	ldr	r3, [r5, #0]
 8004848:	b903      	cbnz	r3, 800484c <__sflush_r+0x78>
 800484a:	6560      	str	r0, [r4, #84]	; 0x54
 800484c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484e:	602f      	str	r7, [r5, #0]
 8004850:	2900      	cmp	r1, #0
 8004852:	d0cb      	beq.n	80047ec <__sflush_r+0x18>
 8004854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004858:	4299      	cmp	r1, r3
 800485a:	d002      	beq.n	8004862 <__sflush_r+0x8e>
 800485c:	4628      	mov	r0, r5
 800485e:	f7ff fb17 	bl	8003e90 <_free_r>
 8004862:	2000      	movs	r0, #0
 8004864:	6360      	str	r0, [r4, #52]	; 0x34
 8004866:	e7c2      	b.n	80047ee <__sflush_r+0x1a>
 8004868:	6a21      	ldr	r1, [r4, #32]
 800486a:	2301      	movs	r3, #1
 800486c:	4628      	mov	r0, r5
 800486e:	47b0      	blx	r6
 8004870:	1c41      	adds	r1, r0, #1
 8004872:	d1c7      	bne.n	8004804 <__sflush_r+0x30>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0c4      	beq.n	8004804 <__sflush_r+0x30>
 800487a:	2b1d      	cmp	r3, #29
 800487c:	d001      	beq.n	8004882 <__sflush_r+0xae>
 800487e:	2b16      	cmp	r3, #22
 8004880:	d101      	bne.n	8004886 <__sflush_r+0xb2>
 8004882:	602f      	str	r7, [r5, #0]
 8004884:	e7b2      	b.n	80047ec <__sflush_r+0x18>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	e7ae      	b.n	80047ee <__sflush_r+0x1a>
 8004890:	690f      	ldr	r7, [r1, #16]
 8004892:	2f00      	cmp	r7, #0
 8004894:	d0aa      	beq.n	80047ec <__sflush_r+0x18>
 8004896:	0793      	lsls	r3, r2, #30
 8004898:	bf18      	it	ne
 800489a:	2300      	movne	r3, #0
 800489c:	680e      	ldr	r6, [r1, #0]
 800489e:	bf08      	it	eq
 80048a0:	694b      	ldreq	r3, [r1, #20]
 80048a2:	1bf6      	subs	r6, r6, r7
 80048a4:	600f      	str	r7, [r1, #0]
 80048a6:	608b      	str	r3, [r1, #8]
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	dd9f      	ble.n	80047ec <__sflush_r+0x18>
 80048ac:	4633      	mov	r3, r6
 80048ae:	463a      	mov	r2, r7
 80048b0:	4628      	mov	r0, r5
 80048b2:	6a21      	ldr	r1, [r4, #32]
 80048b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80048b8:	47e0      	blx	ip
 80048ba:	2800      	cmp	r0, #0
 80048bc:	dc06      	bgt.n	80048cc <__sflush_r+0xf8>
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	e790      	b.n	80047ee <__sflush_r+0x1a>
 80048cc:	4407      	add	r7, r0
 80048ce:	1a36      	subs	r6, r6, r0
 80048d0:	e7ea      	b.n	80048a8 <__sflush_r+0xd4>
 80048d2:	bf00      	nop
 80048d4:	20400001 	.word	0x20400001

080048d8 <_fflush_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b913      	cbnz	r3, 80048e8 <_fflush_r+0x10>
 80048e2:	2500      	movs	r5, #0
 80048e4:	4628      	mov	r0, r5
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	b118      	cbz	r0, 80048f2 <_fflush_r+0x1a>
 80048ea:	6983      	ldr	r3, [r0, #24]
 80048ec:	b90b      	cbnz	r3, 80048f2 <_fflush_r+0x1a>
 80048ee:	f000 f887 	bl	8004a00 <__sinit>
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <_fflush_r+0x6c>)
 80048f4:	429c      	cmp	r4, r3
 80048f6:	d11b      	bne.n	8004930 <_fflush_r+0x58>
 80048f8:	686c      	ldr	r4, [r5, #4]
 80048fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0ef      	beq.n	80048e2 <_fflush_r+0xa>
 8004902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004904:	07d0      	lsls	r0, r2, #31
 8004906:	d404      	bmi.n	8004912 <_fflush_r+0x3a>
 8004908:	0599      	lsls	r1, r3, #22
 800490a:	d402      	bmi.n	8004912 <_fflush_r+0x3a>
 800490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490e:	f000 f915 	bl	8004b3c <__retarget_lock_acquire_recursive>
 8004912:	4628      	mov	r0, r5
 8004914:	4621      	mov	r1, r4
 8004916:	f7ff ff5d 	bl	80047d4 <__sflush_r>
 800491a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800491c:	4605      	mov	r5, r0
 800491e:	07da      	lsls	r2, r3, #31
 8004920:	d4e0      	bmi.n	80048e4 <_fflush_r+0xc>
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	059b      	lsls	r3, r3, #22
 8004926:	d4dd      	bmi.n	80048e4 <_fflush_r+0xc>
 8004928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800492a:	f000 f908 	bl	8004b3e <__retarget_lock_release_recursive>
 800492e:	e7d9      	b.n	80048e4 <_fflush_r+0xc>
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_fflush_r+0x70>)
 8004932:	429c      	cmp	r4, r3
 8004934:	d101      	bne.n	800493a <_fflush_r+0x62>
 8004936:	68ac      	ldr	r4, [r5, #8]
 8004938:	e7df      	b.n	80048fa <_fflush_r+0x22>
 800493a:	4b04      	ldr	r3, [pc, #16]	; (800494c <_fflush_r+0x74>)
 800493c:	429c      	cmp	r4, r3
 800493e:	bf08      	it	eq
 8004940:	68ec      	ldreq	r4, [r5, #12]
 8004942:	e7da      	b.n	80048fa <_fflush_r+0x22>
 8004944:	08008a50 	.word	0x08008a50
 8004948:	08008a70 	.word	0x08008a70
 800494c:	08008a30 	.word	0x08008a30

08004950 <std>:
 8004950:	2300      	movs	r3, #0
 8004952:	b510      	push	{r4, lr}
 8004954:	4604      	mov	r4, r0
 8004956:	e9c0 3300 	strd	r3, r3, [r0]
 800495a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495e:	6083      	str	r3, [r0, #8]
 8004960:	8181      	strh	r1, [r0, #12]
 8004962:	6643      	str	r3, [r0, #100]	; 0x64
 8004964:	81c2      	strh	r2, [r0, #14]
 8004966:	6183      	str	r3, [r0, #24]
 8004968:	4619      	mov	r1, r3
 800496a:	2208      	movs	r2, #8
 800496c:	305c      	adds	r0, #92	; 0x5c
 800496e:	f7ff f92b 	bl	8003bc8 <memset>
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <std+0x38>)
 8004974:	6224      	str	r4, [r4, #32]
 8004976:	6263      	str	r3, [r4, #36]	; 0x24
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <std+0x3c>)
 800497a:	62a3      	str	r3, [r4, #40]	; 0x28
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <std+0x40>)
 800497e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <std+0x44>)
 8004982:	6323      	str	r3, [r4, #48]	; 0x30
 8004984:	bd10      	pop	{r4, pc}
 8004986:	bf00      	nop
 8004988:	08004cc9 	.word	0x08004cc9
 800498c:	08004ceb 	.word	0x08004ceb
 8004990:	08004d23 	.word	0x08004d23
 8004994:	08004d47 	.word	0x08004d47

08004998 <_cleanup_r>:
 8004998:	4901      	ldr	r1, [pc, #4]	; (80049a0 <_cleanup_r+0x8>)
 800499a:	f000 b8af 	b.w	8004afc <_fwalk_reent>
 800499e:	bf00      	nop
 80049a0:	080048d9 	.word	0x080048d9

080049a4 <__sfmoreglue>:
 80049a4:	2268      	movs	r2, #104	; 0x68
 80049a6:	b570      	push	{r4, r5, r6, lr}
 80049a8:	1e4d      	subs	r5, r1, #1
 80049aa:	4355      	muls	r5, r2
 80049ac:	460e      	mov	r6, r1
 80049ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049b2:	f7ff fad5 	bl	8003f60 <_malloc_r>
 80049b6:	4604      	mov	r4, r0
 80049b8:	b140      	cbz	r0, 80049cc <__sfmoreglue+0x28>
 80049ba:	2100      	movs	r1, #0
 80049bc:	e9c0 1600 	strd	r1, r6, [r0]
 80049c0:	300c      	adds	r0, #12
 80049c2:	60a0      	str	r0, [r4, #8]
 80049c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049c8:	f7ff f8fe 	bl	8003bc8 <memset>
 80049cc:	4620      	mov	r0, r4
 80049ce:	bd70      	pop	{r4, r5, r6, pc}

080049d0 <__sfp_lock_acquire>:
 80049d0:	4801      	ldr	r0, [pc, #4]	; (80049d8 <__sfp_lock_acquire+0x8>)
 80049d2:	f000 b8b3 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 80049d6:	bf00      	nop
 80049d8:	20000595 	.word	0x20000595

080049dc <__sfp_lock_release>:
 80049dc:	4801      	ldr	r0, [pc, #4]	; (80049e4 <__sfp_lock_release+0x8>)
 80049de:	f000 b8ae 	b.w	8004b3e <__retarget_lock_release_recursive>
 80049e2:	bf00      	nop
 80049e4:	20000595 	.word	0x20000595

080049e8 <__sinit_lock_acquire>:
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__sinit_lock_acquire+0x8>)
 80049ea:	f000 b8a7 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 80049ee:	bf00      	nop
 80049f0:	20000596 	.word	0x20000596

080049f4 <__sinit_lock_release>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__sinit_lock_release+0x8>)
 80049f6:	f000 b8a2 	b.w	8004b3e <__retarget_lock_release_recursive>
 80049fa:	bf00      	nop
 80049fc:	20000596 	.word	0x20000596

08004a00 <__sinit>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	4604      	mov	r4, r0
 8004a04:	f7ff fff0 	bl	80049e8 <__sinit_lock_acquire>
 8004a08:	69a3      	ldr	r3, [r4, #24]
 8004a0a:	b11b      	cbz	r3, 8004a14 <__sinit+0x14>
 8004a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a10:	f7ff bff0 	b.w	80049f4 <__sinit_lock_release>
 8004a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a18:	6523      	str	r3, [r4, #80]	; 0x50
 8004a1a:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <__sinit+0x68>)
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <__sinit+0x6c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	bf08      	it	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	4620      	mov	r0, r4
 8004a2a:	bf08      	it	eq
 8004a2c:	61a3      	streq	r3, [r4, #24]
 8004a2e:	f000 f81f 	bl	8004a70 <__sfp>
 8004a32:	6060      	str	r0, [r4, #4]
 8004a34:	4620      	mov	r0, r4
 8004a36:	f000 f81b 	bl	8004a70 <__sfp>
 8004a3a:	60a0      	str	r0, [r4, #8]
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f000 f817 	bl	8004a70 <__sfp>
 8004a42:	2200      	movs	r2, #0
 8004a44:	2104      	movs	r1, #4
 8004a46:	60e0      	str	r0, [r4, #12]
 8004a48:	6860      	ldr	r0, [r4, #4]
 8004a4a:	f7ff ff81 	bl	8004950 <std>
 8004a4e:	2201      	movs	r2, #1
 8004a50:	2109      	movs	r1, #9
 8004a52:	68a0      	ldr	r0, [r4, #8]
 8004a54:	f7ff ff7c 	bl	8004950 <std>
 8004a58:	2202      	movs	r2, #2
 8004a5a:	2112      	movs	r1, #18
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	f7ff ff77 	bl	8004950 <std>
 8004a62:	2301      	movs	r3, #1
 8004a64:	61a3      	str	r3, [r4, #24]
 8004a66:	e7d1      	b.n	8004a0c <__sinit+0xc>
 8004a68:	08008820 	.word	0x08008820
 8004a6c:	08004999 	.word	0x08004999

08004a70 <__sfp>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	4607      	mov	r7, r0
 8004a74:	f7ff ffac 	bl	80049d0 <__sfp_lock_acquire>
 8004a78:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <__sfp+0x84>)
 8004a7a:	681e      	ldr	r6, [r3, #0]
 8004a7c:	69b3      	ldr	r3, [r6, #24]
 8004a7e:	b913      	cbnz	r3, 8004a86 <__sfp+0x16>
 8004a80:	4630      	mov	r0, r6
 8004a82:	f7ff ffbd 	bl	8004a00 <__sinit>
 8004a86:	3648      	adds	r6, #72	; 0x48
 8004a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	d503      	bpl.n	8004a98 <__sfp+0x28>
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	b30b      	cbz	r3, 8004ad8 <__sfp+0x68>
 8004a94:	6836      	ldr	r6, [r6, #0]
 8004a96:	e7f7      	b.n	8004a88 <__sfp+0x18>
 8004a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a9c:	b9d5      	cbnz	r5, 8004ad4 <__sfp+0x64>
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <__sfp+0x88>)
 8004aa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004aa4:	60e3      	str	r3, [r4, #12]
 8004aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8004aa8:	f000 f847 	bl	8004b3a <__retarget_lock_init_recursive>
 8004aac:	f7ff ff96 	bl	80049dc <__sfp_lock_release>
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004abc:	6025      	str	r5, [r4, #0]
 8004abe:	61a5      	str	r5, [r4, #24]
 8004ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ac4:	f7ff f880 	bl	8003bc8 <memset>
 8004ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad4:	3468      	adds	r4, #104	; 0x68
 8004ad6:	e7d9      	b.n	8004a8c <__sfp+0x1c>
 8004ad8:	2104      	movs	r1, #4
 8004ada:	4638      	mov	r0, r7
 8004adc:	f7ff ff62 	bl	80049a4 <__sfmoreglue>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	6030      	str	r0, [r6, #0]
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d1d5      	bne.n	8004a94 <__sfp+0x24>
 8004ae8:	f7ff ff78 	bl	80049dc <__sfp_lock_release>
 8004aec:	230c      	movs	r3, #12
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	e7ee      	b.n	8004ad0 <__sfp+0x60>
 8004af2:	bf00      	nop
 8004af4:	08008820 	.word	0x08008820
 8004af8:	ffff0001 	.word	0xffff0001

08004afc <_fwalk_reent>:
 8004afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b00:	4606      	mov	r6, r0
 8004b02:	4688      	mov	r8, r1
 8004b04:	2700      	movs	r7, #0
 8004b06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b12:	d505      	bpl.n	8004b20 <_fwalk_reent+0x24>
 8004b14:	6824      	ldr	r4, [r4, #0]
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	d1f7      	bne.n	8004b0a <_fwalk_reent+0xe>
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b20:	89ab      	ldrh	r3, [r5, #12]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d907      	bls.n	8004b36 <_fwalk_reent+0x3a>
 8004b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	d003      	beq.n	8004b36 <_fwalk_reent+0x3a>
 8004b2e:	4629      	mov	r1, r5
 8004b30:	4630      	mov	r0, r6
 8004b32:	47c0      	blx	r8
 8004b34:	4307      	orrs	r7, r0
 8004b36:	3568      	adds	r5, #104	; 0x68
 8004b38:	e7e9      	b.n	8004b0e <_fwalk_reent+0x12>

08004b3a <__retarget_lock_init_recursive>:
 8004b3a:	4770      	bx	lr

08004b3c <__retarget_lock_acquire_recursive>:
 8004b3c:	4770      	bx	lr

08004b3e <__retarget_lock_release_recursive>:
 8004b3e:	4770      	bx	lr

08004b40 <__swhatbuf_r>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	460e      	mov	r6, r1
 8004b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b48:	4614      	mov	r4, r2
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	461d      	mov	r5, r3
 8004b4e:	b096      	sub	sp, #88	; 0x58
 8004b50:	da08      	bge.n	8004b64 <__swhatbuf_r+0x24>
 8004b52:	2200      	movs	r2, #0
 8004b54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b58:	602a      	str	r2, [r5, #0]
 8004b5a:	061a      	lsls	r2, r3, #24
 8004b5c:	d410      	bmi.n	8004b80 <__swhatbuf_r+0x40>
 8004b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b62:	e00e      	b.n	8004b82 <__swhatbuf_r+0x42>
 8004b64:	466a      	mov	r2, sp
 8004b66:	f000 f915 	bl	8004d94 <_fstat_r>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	dbf1      	blt.n	8004b52 <__swhatbuf_r+0x12>
 8004b6e:	9a01      	ldr	r2, [sp, #4]
 8004b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b78:	425a      	negs	r2, r3
 8004b7a:	415a      	adcs	r2, r3
 8004b7c:	602a      	str	r2, [r5, #0]
 8004b7e:	e7ee      	b.n	8004b5e <__swhatbuf_r+0x1e>
 8004b80:	2340      	movs	r3, #64	; 0x40
 8004b82:	2000      	movs	r0, #0
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	b016      	add	sp, #88	; 0x58
 8004b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b8c <__smakebuf_r>:
 8004b8c:	898b      	ldrh	r3, [r1, #12]
 8004b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b90:	079d      	lsls	r5, r3, #30
 8004b92:	4606      	mov	r6, r0
 8004b94:	460c      	mov	r4, r1
 8004b96:	d507      	bpl.n	8004ba8 <__smakebuf_r+0x1c>
 8004b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	6163      	str	r3, [r4, #20]
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	466a      	mov	r2, sp
 8004baa:	ab01      	add	r3, sp, #4
 8004bac:	f7ff ffc8 	bl	8004b40 <__swhatbuf_r>
 8004bb0:	9900      	ldr	r1, [sp, #0]
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f7ff f9d3 	bl	8003f60 <_malloc_r>
 8004bba:	b948      	cbnz	r0, 8004bd0 <__smakebuf_r+0x44>
 8004bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc0:	059a      	lsls	r2, r3, #22
 8004bc2:	d4ef      	bmi.n	8004ba4 <__smakebuf_r+0x18>
 8004bc4:	f023 0303 	bic.w	r3, r3, #3
 8004bc8:	f043 0302 	orr.w	r3, r3, #2
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	e7e3      	b.n	8004b98 <__smakebuf_r+0xc>
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <__smakebuf_r+0x7c>)
 8004bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	6020      	str	r0, [r4, #0]
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	9b00      	ldr	r3, [sp, #0]
 8004be0:	6120      	str	r0, [r4, #16]
 8004be2:	6163      	str	r3, [r4, #20]
 8004be4:	9b01      	ldr	r3, [sp, #4]
 8004be6:	b15b      	cbz	r3, 8004c00 <__smakebuf_r+0x74>
 8004be8:	4630      	mov	r0, r6
 8004bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bee:	f000 f8e3 	bl	8004db8 <_isatty_r>
 8004bf2:	b128      	cbz	r0, 8004c00 <__smakebuf_r+0x74>
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	89a0      	ldrh	r0, [r4, #12]
 8004c02:	4305      	orrs	r5, r0
 8004c04:	81a5      	strh	r5, [r4, #12]
 8004c06:	e7cd      	b.n	8004ba4 <__smakebuf_r+0x18>
 8004c08:	08004999 	.word	0x08004999

08004c0c <memchr>:
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	b2c9      	uxtb	r1, r1
 8004c12:	4402      	add	r2, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	d101      	bne.n	8004c1e <memchr+0x12>
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	e003      	b.n	8004c26 <memchr+0x1a>
 8004c1e:	7804      	ldrb	r4, [r0, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	428c      	cmp	r4, r1
 8004c24:	d1f6      	bne.n	8004c14 <memchr+0x8>
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <__malloc_lock>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__malloc_lock+0x8>)
 8004c2a:	f7ff bf87 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000594 	.word	0x20000594

08004c34 <__malloc_unlock>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__malloc_unlock+0x8>)
 8004c36:	f7ff bf82 	b.w	8004b3e <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20000594 	.word	0x20000594

08004c40 <_raise_r>:
 8004c40:	291f      	cmp	r1, #31
 8004c42:	b538      	push	{r3, r4, r5, lr}
 8004c44:	4604      	mov	r4, r0
 8004c46:	460d      	mov	r5, r1
 8004c48:	d904      	bls.n	8004c54 <_raise_r+0x14>
 8004c4a:	2316      	movs	r3, #22
 8004c4c:	6003      	str	r3, [r0, #0]
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004c56:	b112      	cbz	r2, 8004c5e <_raise_r+0x1e>
 8004c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c5c:	b94b      	cbnz	r3, 8004c72 <_raise_r+0x32>
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f000 f830 	bl	8004cc4 <_getpid_r>
 8004c64:	462a      	mov	r2, r5
 8004c66:	4601      	mov	r1, r0
 8004c68:	4620      	mov	r0, r4
 8004c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c6e:	f000 b817 	b.w	8004ca0 <_kill_r>
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d00a      	beq.n	8004c8c <_raise_r+0x4c>
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	d103      	bne.n	8004c82 <_raise_r+0x42>
 8004c7a:	2316      	movs	r3, #22
 8004c7c:	6003      	str	r3, [r0, #0]
 8004c7e:	2001      	movs	r0, #1
 8004c80:	e7e7      	b.n	8004c52 <_raise_r+0x12>
 8004c82:	2400      	movs	r4, #0
 8004c84:	4628      	mov	r0, r5
 8004c86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c8a:	4798      	blx	r3
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e7e0      	b.n	8004c52 <_raise_r+0x12>

08004c90 <raise>:
 8004c90:	4b02      	ldr	r3, [pc, #8]	; (8004c9c <raise+0xc>)
 8004c92:	4601      	mov	r1, r0
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	f7ff bfd3 	b.w	8004c40 <_raise_r>
 8004c9a:	bf00      	nop
 8004c9c:	2000001c 	.word	0x2000001c

08004ca0 <_kill_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4d06      	ldr	r5, [pc, #24]	; (8004cc0 <_kill_r+0x20>)
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	602b      	str	r3, [r5, #0]
 8004cae:	f7fc fd26 	bl	80016fe <_kill>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	d102      	bne.n	8004cbc <_kill_r+0x1c>
 8004cb6:	682b      	ldr	r3, [r5, #0]
 8004cb8:	b103      	cbz	r3, 8004cbc <_kill_r+0x1c>
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	bd38      	pop	{r3, r4, r5, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000598 	.word	0x20000598

08004cc4 <_getpid_r>:
 8004cc4:	f7fc bd14 	b.w	80016f0 <_getpid>

08004cc8 <__sread>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd0:	f000 f894 	bl	8004dfc <_read_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	bfab      	itete	ge
 8004cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cda:	89a3      	ldrhlt	r3, [r4, #12]
 8004cdc:	181b      	addge	r3, r3, r0
 8004cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ce2:	bfac      	ite	ge
 8004ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ce6:	81a3      	strhlt	r3, [r4, #12]
 8004ce8:	bd10      	pop	{r4, pc}

08004cea <__swrite>:
 8004cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	461f      	mov	r7, r3
 8004cf0:	898b      	ldrh	r3, [r1, #12]
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	05db      	lsls	r3, r3, #23
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	d505      	bpl.n	8004d08 <__swrite+0x1e>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d04:	f000 f868 	bl	8004dd8 <_lseek_r>
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	4632      	mov	r2, r6
 8004d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	4628      	mov	r0, r5
 8004d14:	463b      	mov	r3, r7
 8004d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1e:	f000 b817 	b.w	8004d50 <_write_r>

08004d22 <__sseek>:
 8004d22:	b510      	push	{r4, lr}
 8004d24:	460c      	mov	r4, r1
 8004d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2a:	f000 f855 	bl	8004dd8 <_lseek_r>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	bf15      	itete	ne
 8004d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d3e:	81a3      	strheq	r3, [r4, #12]
 8004d40:	bf18      	it	ne
 8004d42:	81a3      	strhne	r3, [r4, #12]
 8004d44:	bd10      	pop	{r4, pc}

08004d46 <__sclose>:
 8004d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4a:	f000 b813 	b.w	8004d74 <_close_r>
	...

08004d50 <_write_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4d05      	ldr	r5, [pc, #20]	; (8004d70 <_write_r+0x20>)
 8004d5c:	602a      	str	r2, [r5, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f7fc fd04 	bl	800176c <_write>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_write_r+0x1e>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_write_r+0x1e>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	20000598 	.word	0x20000598

08004d74 <_close_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	2300      	movs	r3, #0
 8004d78:	4d05      	ldr	r5, [pc, #20]	; (8004d90 <_close_r+0x1c>)
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	602b      	str	r3, [r5, #0]
 8004d80:	f7fc fd10 	bl	80017a4 <_close>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d102      	bne.n	8004d8e <_close_r+0x1a>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	b103      	cbz	r3, 8004d8e <_close_r+0x1a>
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	20000598 	.word	0x20000598

08004d94 <_fstat_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	2300      	movs	r3, #0
 8004d98:	4d06      	ldr	r5, [pc, #24]	; (8004db4 <_fstat_r+0x20>)
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	f7fc fd0a 	bl	80017ba <_fstat>
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	d102      	bne.n	8004db0 <_fstat_r+0x1c>
 8004daa:	682b      	ldr	r3, [r5, #0]
 8004dac:	b103      	cbz	r3, 8004db0 <_fstat_r+0x1c>
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	bd38      	pop	{r3, r4, r5, pc}
 8004db2:	bf00      	nop
 8004db4:	20000598 	.word	0x20000598

08004db8 <_isatty_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4d05      	ldr	r5, [pc, #20]	; (8004dd4 <_isatty_r+0x1c>)
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	602b      	str	r3, [r5, #0]
 8004dc4:	f7fc fd08 	bl	80017d8 <_isatty>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_isatty_r+0x1a>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_isatty_r+0x1a>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	20000598 	.word	0x20000598

08004dd8 <_lseek_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	2200      	movs	r2, #0
 8004de2:	4d05      	ldr	r5, [pc, #20]	; (8004df8 <_lseek_r+0x20>)
 8004de4:	602a      	str	r2, [r5, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f7fc fd00 	bl	80017ec <_lseek>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_lseek_r+0x1e>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_lseek_r+0x1e>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	20000598 	.word	0x20000598

08004dfc <_read_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	2200      	movs	r2, #0
 8004e06:	4d05      	ldr	r5, [pc, #20]	; (8004e1c <_read_r+0x20>)
 8004e08:	602a      	str	r2, [r5, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7fc fc91 	bl	8001732 <_read>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_read_r+0x1e>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_read_r+0x1e>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000598 	.word	0x20000598

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
